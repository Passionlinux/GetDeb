# do not check for root folder by .hg because we use a tarball
# disable the subdir check. but giving the troubles it may be better to place all dirs in one subdir
# do not rearrange the dirs. the install files handle it.
# do not use hg for copying files. we may include too many files here though.
# try not to copy the debian dir. excluding it does not seem to work.
Index: makehuman-1.0.1/buildscripts/build_prepare.py
===================================================================
--- makehuman-1.0.1.orig/buildscripts/build_prepare.py	2014-05-29 18:25:01.470412309 +0200
+++ makehuman-1.0.1/buildscripts/build_prepare.py	2014-05-29 18:25:01.466412310 +0200
@@ -45,7 +45,7 @@
 HG_PATH = "hg"
 
 # Filter of files from source folder to exclude (glob syntax)
-EXCLUDES = ['.hgignore', '.hgeol', '*.target', '*.obj', '*.pyc', '*.pyd', 'maketarget-standalone', 'plugins/4_rendering_mitsuba', 'plugins/4_rendering_povray', 'plugins/4_rendering_aqsis.py', 'plugins/0_modeling_5_editing.py', 'plugins/0_modeling_8_random.py', 'plugins/3_libraries_animation.py', 'compile_*.py', 'build_prepare.py', 'download_assets.py', '*~', '*.bak', 'setup.nsi', 'clean*.sh', 'makehuman.sh', 'clean*.bat', 'makehuman/docs', 'makehuman/icons/*psd', 'makehuman/icons/*bmp', 'makehuman/icons/*ico', 'makehuman/icons/*icns', 'makehuman/icons/*xcf', 'makehuman/icons/makehuman.svg', 'makehuman.rc', '*_contents.txt', 'buildscripts']
+EXCLUDES = ['debian', '.hgignore', '.hgeol', '*.target', '*.obj', '*.pyc', '*.pyd', 'maketarget-standalone', 'plugins/4_rendering_mitsuba', 'plugins/4_rendering_povray', 'plugins/4_rendering_aqsis.py', 'plugins/0_modeling_5_editing.py', 'plugins/0_modeling_8_random.py', 'plugins/3_libraries_animation.py', 'compile_*.py', 'build_prepare.py', 'download_assets.py', '*~', '*.bak', 'setup.nsi', 'clean*.sh', 'makehuman.sh', 'clean*.bat', 'makehuman/docs', 'makehuman/icons/*psd', 'makehuman/icons/*bmp', 'makehuman/icons/*ico', 'makehuman/icons/*icns', 'makehuman/icons/*xcf', 'makehuman/icons/makehuman.svg', 'makehuman.rc', '*_contents.txt', 'buildscripts']
 # Same as above, but applies to release mode only
 EXCLUDES_RELEASE = ['testsuite']
 
@@ -163,10 +163,10 @@
 
     def export(self):
         # Sanity checks
-        if not os.path.isdir(self.sourceFile('.hg')):
+        if not os.path.isdir(self.sourceFile('buildscripts')):
             raise RuntimeError("The export folder %s is not found, the source folder argument should be the root of the hg repository." % self.sourceFile('.hg'))
-        if self.isSubPath(self.targetFile(), self.sourceFile()):
-            raise RuntimeError("The export folder is a subfolder of the source folder, this is not allowed.")
+        #if self.isSubPath(self.targetFile(), self.sourceFile()):
+        #    raise RuntimeError("The export folder is a subfolder of the source folder, this is not allowed.")
         if os.path.exists(self.targetFile()):
             raise RuntimeError("An export folder called %s already exists" % self.targetFile())
         if not os.path.exists(self.sourceFile()):
@@ -263,14 +263,14 @@
             print '\n'
 
         # Re-arrange folders
-        for f in os.listdir( self.targetFile() ):
-            if f == REARRANGE_ROOT_FOLDER:
-                continue
-            path = self.targetFile(f)
-            if os.path.isdir(path):
-                # Move folder in new root folder
-                print "Moving folder %s into new root %s" % (f, REARRANGE_ROOT_FOLDER)
-                shutil.move(path, self.targetFile(os.path.join(REARRANGE_ROOT_FOLDER, f)))
+        #for f in os.listdir( self.targetFile() ):
+        #    if f == REARRANGE_ROOT_FOLDER:
+        #        continue
+        #    path = self.targetFile(f)
+        #    if os.path.isdir(path):
+        #        # Move folder in new root folder
+        #        print "Moving folder %s into new root %s" % (f, REARRANGE_ROOT_FOLDER)
+        #        shutil.move(path, self.targetFile(os.path.join(REARRANGE_ROOT_FOLDER, f)))
         '''
         # Move all contents of new root folder into dist root (overwrite if needed)
         _fixOnFinish = []
@@ -370,14 +370,16 @@
 
     def exportHGFiles(self):
         print "Exporting files from hg repo (hg archive)"
-        excludes = self.getExcludes()
-        exclarg = [item for pair in zip(len(excludes)*['--exclude'], excludes) for item in pair]
+        #excludes = self.getExcludes()
+        #exclarg = [item for pair in zip(len(excludes)*['--exclude'], excludes) for item in pair]
 
-        try:
-            self.runProcess( [HG_PATH, "archive"] + exclarg + [self.targetFile()])
-        except Exception as e:
-            print "An error happened attempting to run 'hg archive'. Is Mercurial (commandline-tools) installed?"
-            raise e
+        for f in ["blendertools", "makehuman"]:
+            _recursive_cp(self.sourceFile(f), self.targetFile(f))
+        #try:
+        #    self.runProcess( [HG_PATH, "archive"] + exclarg + [self.targetFile()])
+        #except Exception as e:
+        #    print "An error happened attempting to run 'hg archive'. Is Mercurial (commandline-tools) installed?"
+        #    raise e
 
         # Because the --excludes option does not appear to be working all too well (at least not with wildcards):
         # Gather files
@@ -402,6 +404,7 @@
 
         # Copy them
         for f in files:
+            if "debian" in f: continue
             targetDir = os.path.dirname(self.targetFile(f))
             if not os.path.isdir(targetDir):
                 os.makedirs(targetDir)
