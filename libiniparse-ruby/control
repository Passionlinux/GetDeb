Source: libiniparse-ruby
Section: libs
Priority: optional
Maintainer: Christoph Korn <christoph.korn@getdeb.net>
Build-Depends: debhelper (>= 7.0.50~), ruby-pkg-tools,
 cdbs, ruby1.8
Standards-Version: 3.9.1
Homepage: http://rubygems.org/gems/iniparse

Package: libiniparse-ruby
Architecture: all
Section: ruby
Depends: ${misc:Depends}, libiniparse-ruby1.8
Description: Pure Ruby library for parsing INI documents (dummy package)
 Library for parsing INI documents.
 === Main features
 .
  * Support for duplicate options. While not common, some INI files
    contain an option more than once. IniParse does not overwrite previous
    options, but allows you to access all of the duplicate values.
 .
  * Preservation of white space and blank lines. When writing back to
    your INI file, line indents, white space and comments (and their indents)
    are preserved. Only trailing white space (which has no significance in INI
    files) will be removed.
 .
  * Preservation of section and option ordering. Sections and options
    are kept in the same order they are in the original document ensuring that
    nothing gets mangled when writing back to the file.
 .
 This package is a dependency package, which depends on Ubuntu's
 default Ruby version (currently 1.8.x).

Package: libiniparse-ruby1.8
Architecture: all
Section: ruby
Depends: ${misc:Depends}, libruby1.8
Description: Pure Ruby library for parsing INI documents
 Library for parsing INI documents.
 === Main features
 .
  * Support for duplicate options. While not common, some INI files
    contain an option more than once. IniParse does not overwrite previous
    options, but allows you to access all of the duplicate values.
 .
  * Preservation of white space and blank lines. When writing back to
    your INI file, line indents, white space and comments (and their indents)
    are preserved. Only trailing white space (which has no significance in INI
    files) will be removed.
 .
  * Preservation of section and option ordering. Sections and options
    are kept in the same order they are in the original document ensuring that
    nothing gets mangled when writing back to the file.
