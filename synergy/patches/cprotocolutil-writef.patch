Description: Resolve ambiguous overloading of private method
 When building with gcc 4.6, g++ gets confused about
 CProtocolUtil::writef(), since it's overloaded on the first
 parameter.  One version is void *, which gcc 4.6 considers
 equivalent when resolving ambiguities.  Since it's private,
 changing it to the real needed type (UInt8 *) resolves the
 problem.  This patch can be removed once all architectures
 have moved to using gcc 4.7 or later as the default compiler.
Author: Jeff Licquia <licquia@debian.org>
Forwarded: no
Last-Update: 2013-06-07
---
This patch header follows DEP-3: http://dep.debian.net/deps/dep3/
Index: synergy-1.6.2/src/lib/synergy/ProtocolUtil.cpp
===================================================================
--- synergy-1.6.2.orig/src/lib/synergy/ProtocolUtil.cpp	2014-12-14 20:46:09.138464625 +0100
+++ synergy-1.6.2/src/lib/synergy/ProtocolUtil.cpp	2014-12-14 20:47:26.334462328 +0100
@@ -342,7 +342,7 @@
 }
 
 void
-ProtocolUtil::writef(void* buffer, const char* fmt, va_list args)
+ProtocolUtil::writef(UInt8* buffer, const char* fmt, va_list args)
 {
 	UInt8* dst = reinterpret_cast<UInt8*>(buffer);
 
Index: synergy-1.6.2/src/lib/synergy/ProtocolUtil.h
===================================================================
--- synergy-1.6.2.orig/src/lib/synergy/ProtocolUtil.h	2014-12-14 20:46:09.138464625 +0100
+++ synergy-1.6.2/src/lib/synergy/ProtocolUtil.h	2014-12-14 20:46:09.134464625 +0100
@@ -79,7 +79,7 @@
 							const char* fmt, va_list);
 
 	static UInt32		getLength(const char* fmt, va_list);
-	static void			writef(void*, const char* fmt, va_list);
+	static void			writef(UInt8*, const char* fmt, va_list);
 	static UInt32		eatLength(const char** fmt);
 	static void			read(synergy::IStream*, void*, UInt32);
 };
