Implement UbuntuOne service.
Index: tomboy/Tomboy/Addins/WebSyncService/Makefile.am
===================================================================
--- tomboy.orig/Tomboy/Addins/WebSyncService/Makefile.am	2011-08-23 22:54:40.127231333 +0100
+++ tomboy/Tomboy/Addins/WebSyncService/Makefile.am	2011-08-23 23:11:21.488427309 +0100
@@ -27,6 +27,8 @@
 	$(srcdir)/WebSyncPreferencesWidget.cs   \
 	$(srcdir)/WebSyncServer.cs          \
 	$(srcdir)/WebSyncServiceAddin.cs	\
+	$(srcdir)/U1SyncServiceAddin.cs		\
+	$(srcdir)/U1SyncPreferencesWidget.cs	\
 	$(srcdir)/Tests/*.cs            	\
 	$(srcdir)/Api/*.cs                  \
 	$(srcdir)/Api/Tests/*.cs            \
Index: tomboy/Tomboy/Addins/WebSyncService/U1SyncPreferencesWidget.cs
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ tomboy/Tomboy/Addins/WebSyncService/U1SyncPreferencesWidget.cs	2011-08-23 23:18:01.453092749 +0100
@@ -0,0 +1,290 @@
+// Permission is hereby granted, free of charge, to any person obtaining 
+// a copy of this software and associated documentation files (the 
+// "Software"), to deal in the Software without restriction, including 
+// without limitation the rights to use, copy, modify, merge, publish, 
+// distribute, sublicense, and/or sell copies of the Software, and to 
+// permit persons to whom the Software is furnished to do so, subject to 
+// the following conditions: 
+//  
+// The above copyright notice and this permission notice shall be 
+// included in all copies or substantial portions of the Software. 
+//  
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
+// 
+// Copyright (c) 2010 Canonical, Ltd. (http://www.canonical.com) 
+// 
+// Authors: 
+//      Rodrigo Moya <rodrigo.moya@canonical.com>
+// 
+
+using System;
+using System.Runtime.InteropServices;
+using System.Web;
+using GLib;
+
+using Mono.Unix;
+using Tomboy.WebSync.Api;
+#if !WIN32
+using HL = System.Net;
+#else
+using HL = MonoHttp;
+#endif 
+
+namespace Tomboy.WebSync
+{
+	public class U1SyncPreferencesWidget : Gtk.VBox
+	{
+		private Api.OAuth oauth;
+		private Gtk.Button authButton;
+		private SyncdaemonAuthentication sdAuth;
+
+		public U1SyncPreferencesWidget (Api.OAuth oauth, string server) : base (false, 5)
+		{
+			sdAuth = new SyncdaemonAuthentication ();
+			sdAuth.CredentialsFound += OnCredentialsFound;
+			sdAuth.AuthenticationCancelled += OnAuthCancelled;
+			sdAuth.AuthenticationError += OnAuthError;
+
+			this.oauth = oauth;
+
+			authButton = new Gtk.Button ();
+			if (!Auth.IsAccessToken) {
+				if (this.sdAuth.HasCredentials ()) {
+					Auth.AuthorizeLocation = "https://one.ubuntu.com/oauth/authorize/";
+					Auth.AccessTokenBaseUrl = "https://one.ubuntu.com/oauth/access/";
+					Auth.RequestTokenBaseUrl = "https://one.ubuntu.com/oauth/request/";
+					Auth.ConsumerKey = sdAuth.ConsumerKey;
+					Auth.ConsumerSecret = sdAuth.ConsumerSecret;
+					Auth.Token = sdAuth.Token;
+					Auth.TokenSecret = sdAuth.TokenSecret;
+
+					authButton.Label = Catalog.GetString ("Already registered");
+					authButton.Sensitive = false;
+					
+				} else
+					authButton.Label = Catalog.GetString ("Register this computer");
+			} else {
+				authButton.Label = Catalog.GetString ("Already registered");
+				authButton.Sensitive = false;
+			}
+			authButton.Clicked += OnAuthButtonClicked;
+
+			Add (authButton);
+
+			ShowAll ();
+		}
+
+		public string Server {
+			get {
+				return "https://one.ubuntu.com/notes/";
+			}
+		}
+
+		public Api.OAuth Auth {
+			get { return oauth; }
+			set {
+				oauth = value;
+				if (oauth == null) {
+					authButton.Label =
+						Catalog.GetString ("Register this computer");
+					authButton.Sensitive = true;
+				}
+			}
+		}
+
+		public void OnAuthButtonClicked (object sender, EventArgs args)
+		{
+			Auth.AuthorizeLocation = "https://one.ubuntu.com/oauth/authorize/";
+			Auth.AccessTokenBaseUrl = "https://one.ubuntu.com/oauth/access/";
+			Auth.RequestTokenBaseUrl = "https://one.ubuntu.com/oauth/request/";
+			Auth.ConsumerKey = "";
+			Auth.ConsumerSecret = "";
+			Auth.Realm = "";
+			Auth.Token = "";
+			Auth.TokenSecret = "";
+
+			authButton.Label = Catalog.GetString ("Authenticating...");
+			authButton.Sensitive = false;
+
+			// Call com.ubuntu.sso
+			sdAuth.LoginOrRegister ();
+		}
+
+		public void OnCredentialsFound (object sender, EventArgs args)
+		{
+			Auth.AuthorizeLocation = "https://one.ubuntu.com/oauth/authorize/";
+			Auth.AccessTokenBaseUrl = "https://one.ubuntu.com/oauth/access/";
+			Auth.RequestTokenBaseUrl = "https://one.ubuntu.com/oauth/request/";
+			Auth.ConsumerKey = sdAuth.ConsumerKey;
+			Auth.ConsumerSecret = sdAuth.ConsumerSecret;
+			Auth.Token = sdAuth.Token;
+			Auth.TokenSecret = sdAuth.TokenSecret;
+
+			authButton.Label = Catalog.GetString ("Authentication complete. Press Save to start synchronizing");
+		}
+
+		public void OnAuthCancelled (object sender, EventArgs args)
+		{
+			authButton.Label = Catalog.GetString ("Register this computer");
+			authButton.Sensitive = false;
+		}
+
+		public void OnAuthError (object sender, EventArgs args)
+		{
+		}
+
+
+	}
+
+	class SyncdaemonAuthentication
+	{
+		private IntPtr syncdaemon = IntPtr.Zero;
+		private IntPtr handle = IntPtr.Zero;
+		private IntPtr credentials = IntPtr.Zero;
+
+		[DllImport("syncdaemon-1.0")]
+		static extern IntPtr syncdaemon_daemon_new ();
+
+		[DllImport("syncdaemon-1.0")]
+		static extern IntPtr syncdaemon_daemon_get_authentication (IntPtr daemon);
+
+		[DllImport("gobject-2.0")]
+		static extern uint g_signal_connect_data (IntPtr obj, IntPtr name, Delegate cb, IntPtr data, IntPtr p, int flags);
+
+		public SyncdaemonAuthentication ()
+		{
+			IntPtr native_name;
+
+			this.syncdaemon = syncdaemon_daemon_new ();
+			this.handle = syncdaemon_daemon_get_authentication (this.syncdaemon);
+
+			native_name = Marshaller.StringToPtrGStrdup ("credentials_found");
+			g_signal_connect_data (this.handle, native_name,
+					       new CredentialsFoundDelegate (credentials_found_cb),
+					       new IntPtr (0), new IntPtr (0), 0);
+			GLib.Marshaller.Free (native_name);
+
+			native_name = Marshaller.StringToPtrGStrdup ("authorization_cancelled");
+			g_signal_connect_data (this.handle, native_name,
+					       new AuthCancelledDelegate (auth_cancelled_cb),
+					       new IntPtr (0), new IntPtr (0), 0);
+			GLib.Marshaller.Free (native_name);
+
+			native_name = Marshaller.StringToPtrGStrdup ("error");
+			g_signal_connect_data (this.handle, native_name,
+					       new AuthErrorDelegate (auth_error_cb),
+					       new IntPtr (0), new IntPtr (0), 0);
+			GLib.Marshaller.Free (native_name);
+			
+		}
+
+		[GLib.CDeclCallback]
+		delegate void CredentialsFoundDelegate (IntPtr auth, IntPtr credentials, IntPtr user_data);
+
+		void credentials_found_cb (IntPtr auth, IntPtr credentials, IntPtr user_data)
+		{
+			Logger.Debug ("credentials_found_cb called");
+			if (this.CredentialsFound != null)
+				this.CredentialsFound (this, new EventArgs ());
+		}
+
+		[GLib.CDeclCallback]
+		delegate void AuthCancelledDelegate (IntPtr auth, IntPtr user_data);
+
+		void auth_cancelled_cb (IntPtr auth, IntPtr user_data)
+		{
+			Logger.Debug ("auth_cancelled_cb called");
+			if (this.AuthenticationCancelled != null)
+				this.AuthenticationCancelled (this, new EventArgs ());
+		}
+
+		[GLib.CDeclCallback]
+		delegate void AuthErrorDelegate (IntPtr auth, IntPtr error, IntPtr user_data);
+
+		void auth_error_cb (IntPtr auth, IntPtr error, IntPtr user_data)
+		{
+			Logger.Debug ("auth_error_cb called");
+			if (this.AuthenticationError != null)
+				this.AuthenticationError (this, new EventArgs ());
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern IntPtr syncdaemon_authentication_find_credentials (IntPtr auth);
+
+		private IntPtr FindCredentials ()
+		{
+			if (IntPtr.Zero == this.credentials)
+				this.credentials = syncdaemon_authentication_find_credentials (this.handle);
+
+			return this.credentials;
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern string syncdaemon_credentials_get_consumer_key (IntPtr credentials);
+
+		public string ConsumerKey {
+			get {
+				IntPtr raw = syncdaemon_authentication_find_credentials (this.handle);
+				return syncdaemon_credentials_get_consumer_key (raw);
+			}
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern string syncdaemon_credentials_get_consumer_secret (IntPtr credentials);
+
+		public string ConsumerSecret {
+			get {
+				IntPtr raw = syncdaemon_authentication_find_credentials (this.handle);
+				return syncdaemon_credentials_get_consumer_secret (raw);
+			}
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern string syncdaemon_credentials_get_token (IntPtr credentials);
+
+		public string Token {
+			get {
+				IntPtr raw = syncdaemon_authentication_find_credentials (this.handle);
+				return syncdaemon_credentials_get_token (raw);
+			}
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern string syncdaemon_credentials_get_token_secret (IntPtr credentials);
+
+		public string TokenSecret {
+			get {
+				IntPtr raw = syncdaemon_authentication_find_credentials (this.handle);
+				return syncdaemon_credentials_get_token_secret (raw);
+			}
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern bool syncdaemon_authentication_has_credentials (IntPtr auth);
+
+		public bool HasCredentials ()
+		{
+			return syncdaemon_authentication_has_credentials (this.handle);
+		}
+
+		[DllImport("syncdaemon-1.0")]
+		static extern void syncdaemon_authentication_login_or_register (IntPtr auth);
+
+		public void LoginOrRegister ()
+		{
+			syncdaemon_authentication_login_or_register (this.handle);
+		}
+
+		public event EventHandler CredentialsFound;
+
+		public event EventHandler AuthenticationCancelled;
+
+		public event EventHandler AuthenticationError;
+	}
+}
Index: tomboy/Tomboy/Addins/WebSyncService/U1SyncServiceAddin.cs
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ tomboy/Tomboy/Addins/WebSyncService/U1SyncServiceAddin.cs	2011-08-23 23:14:17.277675713 +0100
@@ -0,0 +1,229 @@
+// Permission is hereby granted, free of charge, to any person obtaining 
+// a copy of this software and associated documentation files (the 
+// "Software"), to deal in the Software without restriction, including 
+// without limitation the rights to use, copy, modify, merge, publish, 
+// distribute, sublicense, and/or sell copies of the Software, and to 
+// permit persons to whom the Software is furnished to do so, subject to 
+// the following conditions: 
+//  
+// The above copyright notice and this permission notice shall be 
+// included in all copies or substantial portions of the Software. 
+//  
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
+// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
+// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE 
+// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION 
+// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
+// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 
+// 
+// Copyright (c) 2010 Canonical, Ltd. (http://www.canonical.com) 
+// 
+// Authors: 
+//      Rodrigo Moya <rodrigo.moya@canonical.com>
+// 
+
+using System;
+
+using Mono.Unix;
+
+using Tomboy.Sync;
+
+namespace Tomboy.WebSync
+{
+	public class U1SyncServiceAddin : SyncServiceAddin
+	{
+		private bool initialized;
+		private U1SyncPreferencesWidget prefsWidget;
+
+		private const string serverUrlPrefPath =
+			"/apps/tomboy/sync/ubuntuone/server";
+		private const string accessTokenBaseUrlPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_access_token_base_url";
+		private const string authorizeLocationPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_authorize_location";
+		private const string consumerKeyPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_consumer_key";
+		private const string consumerSecretPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_consumer_secret";
+		private const string realmPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_realm";
+		private const string requestTokenBaseUrlPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_request_token_base_url";
+		private const string tokenPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_token";
+		private const string tokenSecretPrefPath =
+			"/apps/tomboy/sync/ubuntuone/oauth_token_secret";
+
+		public U1SyncServiceAddin ()
+		{
+		}
+
+		#region SyncServiceAddin Overrides
+
+		public override string Id {
+			get { return "ubuntuone"; }
+		}
+
+		public override string Name {
+			get {
+				return Catalog.GetString ("Ubuntu One");
+			}
+		}
+
+		public override bool IsConfigured {
+			get {
+				string serverPref;
+				Api.OAuth oauth;
+				GetConfigSettings (out oauth, out serverPref);
+				return !string.IsNullOrEmpty (serverPref) &&
+					oauth != null &&
+					oauth.IsAccessToken;
+			}
+		}
+
+		public override bool IsSupported {
+			get {
+				return true; // TODO: Ever false?
+			}
+		}
+
+		public override Gtk.Widget CreatePreferencesControl (EventHandler requiredPrefChanged)
+		{
+			string serverPref;
+			Api.OAuth oauth;
+			GetConfigSettings (out oauth, out serverPref);
+			prefsWidget = new U1SyncPreferencesWidget (oauth, serverPref);
+			return prefsWidget;
+		}
+
+		public override SyncServer CreateSyncServer ()
+		{
+			string serverPref;
+			Api.OAuth oauth;
+			GetConfigSettings (out oauth, out serverPref);
+			return new WebSyncServer (serverPref, oauth);
+		}
+
+		public override void PostSyncCleanup ()
+		{
+		}
+
+		public override void ResetConfiguration ()
+		{
+			SaveConfigSettings (null, null);
+			prefsWidget.Auth = null;
+		}
+
+		public override bool SaveConfiguration ()
+		{
+			// TODO: Is this really sufficient validation?
+			//       Should we try a REST API request?
+			if (prefsWidget.Auth == null ||
+			    prefsWidget.Auth.ConsumerKey == null ||
+			    prefsWidget.Auth.ConsumerSecret == null ||
+			    prefsWidget.Auth.Token == null ||
+			    prefsWidget.Auth.TokenSecret == null)
+				return false;
+			SaveConfigSettings (prefsWidget.Auth, prefsWidget.Server);
+			return true;
+		}
+
+		#endregion
+
+		#region ApplicationAddin Overrides
+
+		public override void Initialize ()
+		{
+			initialized = true;
+		}
+
+		public override void Shutdown ()
+		{
+			initialized = false;
+		}
+		
+		public override bool Initialized {
+			get { return initialized; }
+		}
+
+		#endregion
+
+		#region Private Members
+
+		private void GetConfigSettings (out Api.OAuth oauthConfig, out string serverPref)
+		{
+			serverPref = (string)
+				Preferences.Get (serverUrlPrefPath);
+
+			oauthConfig = new Api.OAuth ();
+			oauthConfig.AccessTokenBaseUrl =
+				Preferences.Get (accessTokenBaseUrlPrefPath) as string;
+			oauthConfig.AuthorizeLocation =
+				Preferences.Get (authorizeLocationPrefPath) as string;
+			oauthConfig.ConsumerKey =
+				Preferences.Get (consumerKeyPrefPath) as string;
+			oauthConfig.ConsumerSecret =
+				Preferences.Get (consumerSecretPrefPath) as string;
+			oauthConfig.Realm =
+				Preferences.Get (realmPrefPath) as string;
+			oauthConfig.RequestTokenBaseUrl =
+				Preferences.Get (requestTokenBaseUrlPrefPath) as string;
+			oauthConfig.Token =
+				Preferences.Get (tokenPrefPath) as string;
+			oauthConfig.TokenSecret =
+				Preferences.Get (tokenSecretPrefPath) as string;
+
+			// The fact that the configuration was saved at all
+			// implies that the token is an access token.
+			// TODO: Any benefit in actually storing this bool, in
+			//       case of weird circumstances?
+			oauthConfig.IsAccessToken =
+				!String.IsNullOrEmpty (oauthConfig.Token);
+		}
+
+		private void SaveConfigSettings (Api.OAuth oauthConfig, string serverPref)
+		{
+			Preferences.Set (serverUrlPrefPath, GetConfigString (serverPref));
+			Preferences.Set (accessTokenBaseUrlPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.AccessTokenBaseUrl) :
+			                 String.Empty);
+			Preferences.Set (authorizeLocationPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.AuthorizeLocation) :
+			                 String.Empty);
+			Preferences.Set (consumerKeyPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.ConsumerKey) :
+			                 String.Empty);
+			Preferences.Set (consumerSecretPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.ConsumerSecret) :
+			                 String.Empty);
+			Preferences.Set (realmPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.Realm) :
+			                 String.Empty);
+			Preferences.Set (requestTokenBaseUrlPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.RequestTokenBaseUrl) :
+			                 String.Empty);
+			Preferences.Set (tokenPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.Token) :
+			                 String.Empty);
+			Preferences.Set (tokenSecretPrefPath,
+			                 oauthConfig != null ?
+			                 GetConfigString (oauthConfig.TokenSecret) :
+			                 String.Empty);
+		}
+
+		private string GetConfigString (string val)
+		{
+			return val ?? String.Empty;
+		}
+
+		#endregion
+	}
+}
Index: tomboy/Tomboy/Addins/WebSyncService/WebSyncService.addin.xml
===================================================================
--- tomboy.orig/Tomboy/Addins/WebSyncService/WebSyncService.addin.xml	2011-08-23 22:54:40.139230862 +0100
+++ tomboy/Tomboy/Addins/WebSyncService/WebSyncService.addin.xml	2011-08-23 23:11:21.488427309 +0100
@@ -18,4 +18,8 @@
 	<Extension path="/Tomboy/SyncServiceAddins">
 		<SyncServiceAddin type="Tomboy.WebSync.WebSyncServiceAddin" />
 	</Extension>
+
+	<Extension path="/Tomboy/SyncServiceAddins">
+		<SyncServiceAddin type="Tomboy.WebSync.U1SyncServiceAddin" />
+	</Extension>
 </Addin>
