cgminer (3.12.1-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Document new features for antminer U1 and hfa devices.
    - Add support for ANU overclocking.
    - Increase hfa fanspeed by more if we're rising in temp above the target
    than if the temp is staying the same.
    - Add debug output when get_work() is blocked for an extended period and
    add grace time to the device's last valid work to prevent false positives
    for device failure.
    - Issue a shutdown prior to a reset command for hfa devices and lock
    access to reads awaiting the response if the device is already running.
    - Do not register as successful a hfa init sequence that reports the
    clockrate as zero.
    - Show device info in noffset nonce share above target message.
    - Widen lines in top menu to fit extra large share values.
    - Only show one decimal place if pool diff is not an integer.
    - Show serial number as a hex value in hfa verbose startup.
    - Slowly remove work even if it's not being used to keep the getwork
    counter incrementing even if work is not used and as a test that pools
    are still working.
    - Increase the maximum diff between hfa dies to 100Mhz.
    - Show which hfa die is bringing down all the others when decreasing all
    the clock speeds.
    - Increase the decrease when temp has increased more and we want to
    decrease it on hfa.
    - Give device info with share above target message.
    - Allow throttling of hfa dies more frequently and increasing of speeds
    less frequently.
    - Wait after sending a hfa shutdown to allow the device to properly shut
    down before possibly sending it more commands.
    - Minimise the die clock differences in hfa to no more than 50Mhz.
    - Check for when errno is set on windows as well as the windows variant
    for errors.
    - Revert "Update to libusb-1.0.18"
    - Disable fan/die clock control in hfa if the firmware does not support
    it, with notification.
    - Add ability to enter ANU frequency as a multiple of 25 from 150-500.
    - Decrease hfa clock by 10 if a reset is attempted due to the device
    remaining idle.
    - ifdef out icarus options unused without icarus built in.
    - Reorder command line options alphabetically.
    - Add no matching work to hfa API output.
    - Change various logging message levels in the hfa driver.
    - Only adjust clocks if there is no restart in hfa to avoid 2 restarts
    back to back.
    - Ensure we iterate over all dies adjusting temperate for hfa by starting
    iterating after the last die modified.
    - Clamp initial hfa fanspeed to min/max if passed as parameters.
    - Allow hfa fanspeed to be set via command line.
    - Further relax the target temperatures on hfa driver, targetting 88
    degrees.
    - Try one more time to get the hfa header on init since it can take 2
    seconds for all 3 boards on a sierra.
    - Update authors for removal of gpu/scrypt.
    - Wait for 5 temperature updates in hfa before adjusting fanspeed.
    - Have some leeway before starting to throttle hfa dies.
    - Use increments of 10 when increasing hfa clock since it may not have 5
    MHz granularity internally.
    - Only perform a hfa fan speed update if we have new temps to work with.
    - Correctly measure the hfa max temp and smooth out the changes in its
    value.
    - Choose better defaults for min/max/default fan settings for hfa driver.
    - bab - reduce def speed, fix speed staying in ranges and report
    bank/chips in ioctl() errors
    - bab - add info about number of boards/chips to each Dead Chain
    - These may not be longs (eg: OSX)... fo a safe cast to ensure.
    - bab - add dead boards and dead chains to stats
    - Add fanspeed to hfa api output and set initial fanspeed to 10%
    - Add hfa fanspeed control to try and maintain a target temperature.
    - API-README correct new text format documentation
    - API allow multiple commands/replies in one request
    - Add op commands necessary to control hfa fanspeeds.
    - Add OP_FAN to hf protocol header.
    - Always show the stratum share lag time in debug mode.
    - Add stratum share response lag time to verbose output if it's greater
    than 1 second.
    - Add stratum share submission lag time to verbose information if it's
    over 1 second.
    - Check for more interrupted conditions in util.c and handle them
    gracefully.
    - Send a ping to hfa devices if nothing is sent for over 5 seconds.
    - Add OP_PING to hfa commands
    - Display the hfa serial number as a hexadecimal value.
    - Add the ability to display a hexadecimal 32 bit unsigned integer to the
    API.
    - Limit all hfa restarts for temperature control to no closer than 15
    seconds apart.
    - Allow the hfa temp target to be disabled by setting it to zero.
    - Handle interruptions to various select calls in util.c
    - Add sanity check for silly overflows in hfa die temperature readings.
    - Add per-die throttling control for hfa driver based on each die's
    temperature, issuing a suitable reset to maintain the temperature below
    a configurable target temperature.
    - Update hf protocol
    - Do not memcpy in usbutils unless data was transferred.
    - Send a full allotment of jobs to the hfa device after a restart instead
    of reading the status.
    - Export the flush_queue function for use by drivers.
    - Remove wrong goto
    - Remove the unqueued work reference when we discard work from get queued
    as well.
    - Wake the global work scheduler when we remove a work item from the
    unqueued work pointer.
    - Discard work that is stale in the get_queued() function, returning NULL
    instead.
    - Add a call to a driver specific zero stats function when zero stats is
    called to allow each driver to reset its own stats as well if desired.

 -- Christoph Korn <christoph.korn@getdeb.net>  Fri, 07 Feb 2014 21:04:08 +0100

cgminer (3.12.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Add support for AntminerU1 devices with the icarus driver.
    - Add antminer U1 to comment in udev rules.
    - Do away with usb resets entirely since we retry on both pipe and io
    errors now and they're of dubious value.
    - Retry on usb IO errors instead of faking success.
    - Check that we've cleared the pipe error after a clear request, not the
    err value which is unchanged.
    - Update to libusb-1.0.18
    - Change hfa overheat limit to 90 degrees.
    - Relax timeout in hf get header to 500ms to match the usb timeout.
    - Minion - check/clear interrupts for all chips
    - Set info work to null after it is freed in nf1 after a restart to
    prevent double free later.
    - The second_run bool in libbitfury should be per device. Microoptimise
    its and
    job_switched usage, removing the unused results array for NF1 devices.
    - Fix displayed diff when solo mining at >2^32 diff.
    - bab - stop stale work accumulating
    - bab - set the default SPI speed back to 96000

 -- Christoph Korn <christoph.korn@getdeb.net>  Wed, 29 Jan 2014 18:35:15 +0100

cgminer (3.11.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Add hashfast documentation to ASIC README
    - Support the variable HFA naming throughout the driver notices.
    - Set the global hfa hash clock rate to equal the lowest if we are
    lowering it
    for a device reset since it may be re-hotplugged after failing reset.
    - Decrease the hfa clock rate if it is overclocked and we have had to try
    resetting it.
    - Put a sanity check on the measured temperature in the hfa driver for
    obviously
    wrong values.
    - Avoid calling applog from within hfa statline before to avoid a
    deadlock.
    - Add throttling control to hfa driver, configurable at command line,
    nominally
    set to 85 degrees.
    - Reset hfa device if no valid hashes are seen for 1 minute from the last
    work.
    - Store when the last getwork was retrieved and display it in the API
    summary.
    - bab - also report dead chip count screen
    - Count share based hashes in the hfa driver with the device diff to get
    more
    frequent updates.
    - Only count 2/3 of the accumulated hashes on each pass through the hfa
    scan
    work loop to smooth out displayed hashrate.
    - bab add total history HW% to API stats
    - Test valid nonces in the hashfast driver allowing us to check against
    the
    target when trying to submit them.
    - No point casting a double to a uint64
    - Convert the hfa hashmeter to one based on successful share return and
    display
    the raw and calculated hash totals in the API.
    - bab - remove libbitfury dependency since it requires USB
    - Add description to hfa hash clock command.
    - Add hfa board temperatures to API output.
    - Wait for up to 0.5 seconds in the hashfast scanwork loop if no jobs are
    required.
    - Label HFA devices as B or S when their configuration matches babyjet or
    sierra.
    - Fix libbitfury being compiled in always by mistake.
    - bab - spelling
    - Add bab-options
    - bab - tune the chip speed based on error rates
    - bab record/report spie and miso errors
    - Win32 falsely comes up as big endian pulling in the wrong hf protocol
    header.
    - Remove unused components in hashfast driver.
    - Check in all usb communication places for hashfast driver that the
    device
    still exists.
    - Do not send a usb reset on a usb read pipe error.
    - Don't replace usb pipe errors with the pipe reset return code.
    - Updated hf protocol header.
    - The search for extra nonce is not worth performing in the hashfast
    driver.
    - Add core address to hfa parse nonce debugging.
    - Retry sending a frame once if it has failed in hfa_send_frame
    - Add extra hfa usb init errors.
    - Quiet now unused variable warning in hfa detect.
    - Remove unused variable.
    - Add board temperature to hfa debug
    - Make submit_tested_work return a bool about whether it meets the work
    target
    or not.
    - Provide a helper function for determining dev runtime and use it in the
    hashmeters used.
    - Look for hfa usb init header for 2 seconds, then resend the init twice
    more
    before failing.
    - Really only set up the hfa crc table once.
    - Generically increase the queue if we are mining on a pool without local
    work
    generation each time we run out of work.
    - Change new block detection message since longpoll is rarely relevant
    today.
    - Change the default clockspeed bits on nanofury devices to 50 and add a
    command
    line option to allow it to be changed.
    - Use unused line at the top of the log window which often gets stuck
    unchanging.
    - Clear pool work on a stratum reconnect message.
    - bab record/report spie and miso errors
    - bab - cleanup old work for dead chips also
    - bab add avg fail tests to API stats
    - bab report bank/board/chip for dead and v.slow chips
    - bab process all nonce replies per chip together
    - bab reduce work delays
    - bab record the number of E0s discarded
    - bab - modified result parsing
    - bab restore removed unused flag
    - configure - correct minion name
    - bab only scan valid nonce offsets
    - bab record continuous (and max) bad nonces
    - bab display Banks/Boards/Chips in the device window
    - Modify thread naming to make them easier to identify
    - bab reduce the work send delay
    - bab remove results polling
    - bab report SPI wait in seconds
    - bab report missing chips at start and API
    - bab ensure there's enough space for the nonce reply
    - bab correct stats 'Send Max'
    - bab allow long enough wait on ioctl() per board
    - bab more I/O stats
    - api.c 2014
    - api allow any size stats data
    - bab add processed links which excludes expired links skipped
    - bab report chips per bank, hw% and ghs per chip
    - bab lock access to new_nonces to ensure correct reporting
    - bab report V2 banks/boards during initialisation
    - bab expire chip work
    - bab use only k_lists and make work handling more refined
    - klist - allow adding to tail
    - bab remove old unused #define
    - bab correct for master git
    - correct klist reallocs
    - klist lists for bab
    - api.c correct DEVICECODE and ordering
    - Maxchips should be 384 (16 chips/board 24 boards/controller)
    - bab more detailed stats and delay less when waiting for a buffer
    - api add data type AVG float 3 decimal
    - bab - add V2 detect with bug fix in detect
    - api.c set the actual version number to 3.0
    - API V3.0 unlimited socket reply size
    - README update --usb
    - Check for loss of device in usb read before any other code on the
    usbdev
    - Change stratum strings under stratum_lock in reconnect and free old
    strings.
    - Add mcp2210 compilation to want_libbitfury configs.
    - Fix HF driver typo.

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 25 Jan 2014 16:33:09 +0100

cgminer (3.10.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Set the mcp2210 transfer setting only when it changes.
    - Buffer sizes in nanofury device data are unnecessarily large.
    - Only perform spi reset on init, not with each transaction.
    - Remove spi_detect_bitfury at nanofury startup and fix incorrect refresh
    time.
    - Use a simple serialised work model for nanofury
    - Use bitfury_checkresults to avoid hashing results twice in nanofury.
    - Export bitfury_checkresults in libbitfury
    - Pass extra parameters for later use in libbitfury_sendHashData
    - Avoid double handling bswap of the nonce value in nanofury
    - Avoid unnecessary rehashing in nanofury nonce checking.
    - Remove the unused portions of atrvec in the nanofury driver
    - Age work in nf1_scan to avoid risk of losing a work item and leaking
    memory.
    - bitfury_work_to_payload is double handling the data unnecessarily
    - Default bitrate on nanofury should be 200kHz
    - localvec should be only 80 bytes not 80 words
    - Wrong init value for nanofury
    - Remove unused rehash values from nanofury driver.
    - Only update info work in nanofury driver when it's empty.
    - Fill the appropriate type of usb transfer when we know if it's an
    interrupt
    transfer instead of a bulk one.
    - Use the internal knowledge of the usb epinfo to determine whether we
    should be
    doing an interrupt instead of a bulk transfer, and do not send a ZLP if
    so, and
    limit read transfer to expected size automatically.
    - Avoid bin2hex memleak when we start getting nanofury nonces
    - Set atrvec only once and use a local array for each device's work.
    - Cancel any spi transfers on nf1 close
    - Add bitfury detection loop to nanofury startup
    - Move spi init code to libbitfury
    - Remove inappropriate extra config reg in nanofury setup.
    - Status 0x30 should never happen with spi transfers.
    - Fix spi transfer data size transmission mistakes.
    - Minor correctness change in spi_add_data
    - spi_txrx should always send and receive the same size message
    - Random libbitfury changes.
    - Set value of gpio pins to low on closing nanofury.
    - Fix more init sequence for nanofury.
    - Add basic initialisation for nf1 devices
    - Add basic nf1_scan function.
    - Basic import of libbitfury functions from nanofury branch
    - Import functions from nanofury fork for libbitfury
    - Meter out spi sends to only 2 bytes at a time, offsetting according to
    how
    much data returns.
    - Use the usb read limit function for mcp2210 reads.
    - Provide a way for usb reads to just read the size asked for with a
    limit bool.
    - Get pin value after an nf1 spi reset.
    - Make sure what we send in the buffer doesn't change during spi reset
    for
    nanofury
    - Remove all standalone gpio setting change functions in mcp2210 and just
    use
    the one global setting function.
    - Set gpio values in the one function with all values for nanofury.
    - Provide a helper function for setting all mcp2210 gpio settings.
    - Add a helper function for getting all mcp2210 gpio settings.
    - Set all pin designations and directions in one call for nanofury and
    don't
    bother storing their values in the info struct.
    - Provide helper functions for setting all pins and dirs on mcp2210
    - Set all nanofury pin designations in one call
    - Provide a helper function for setting all pin designations on mcp2210
    - Store the spi settings in a struct for nanofury devices.
    - Check the received status in mcp2210 spi transfers and repeat a zero
    byte send
    if it's in progress.
    - Set the bytes per spi transfer prior to each mcp2210 transfer.
    - Separate out the send and receive functions for mcp2210 and check
    response
    value in return.
    - Check that mcp2210 spi settings have taken and check the value of the
    pin
    during nanofury setup.
    - Don't set GPIO pin designations after initial setting in nanofury since
    the
    direction and values will be changed.
    - Provide an mcp 2210 set gpio input helper function that sets a pin to
    gpio and
    input.
    - Move the set gpio output function to a generic mcp2210 version from
    nanofury
    which also sets the pin to gpio.
    - Implement a nanofury txrx with a larger buffer and cycling over data
    too large
    to send.
    - Implement magic spi reset sequence for nanofury.
    - Add more spi magic to the nanofury init sequence.
    - Add lots of magic spi initialisation to nanofury.
    - Export reused components of bitfury management into a libbitfury and
    use for
    bab and bitfury drivers.
    - More init sequence for nanofury and implement a close function that
    sets all
    pins to input.
    - Reword offset header handling in hfa_get_header
    - Sanity check in hfa_get_header
    - Add more checks in hashfast driver for lost devices.
    - Change spimode and send more data in nanofury setup.
    - Add basic setup  comms to nanofury.
    - Implement an mcp2210 spi transfer function.
    - Set the initial spi settings for nanofury driver.
    - Provide a helper function for gettings mcp2210 spi settings.
    - Implement an mcp2210 set spi transfer settings function.
    - Cancel any SPI transfers in progress in nanofury after initial setup.
    - Implement an mcp2210 spi cancel function.
    - Return only binary values for mcp2210 GPIO values.
    - Set GPIO LED and power to high in nanofury driver.
    - Implement initial part of nanofury init sequence for GPIO pin settings
    and add
    output debugging of set values.
    - Add helper functions for getting and setting mcp2210 gpio pin
    designations.
    - Don't return an error in usb read if we've managed to get the whole
    read
    length we've asked for.
    - Use correct endpoint order for nanofury devices and read with a short
    timeout
    on return loop from send_recv.
    - Add mcp2210 helper functions for getting and setting one GPIO pin val
    and
    direction.
    - Create a generic gpio pin struct and add helpers for mcp get pin val
    and dirs.
    - Check the receive msg of a send/receive cycle on mcp2210 matches the
    send
    message.
    - Add a set of usb commands to the usbutils defines for mcp2210 comms,
    and use
    the same command name for send and receive.
    - Create a generic mcp2210 send_rcv function.
    - Include mcp header for bitfury and fix extra params in macro.
    - Add basic SPI comms defines for mcp2210 and build rules for bitfury.
    - Minion set some core defaults similar to final requirements
    - minion compile warnings
    - move driver-minion.c to main directory
    - Minion with ioctl() stats, settings to attempt to emulate 21TH/s
    - minion driver with results interrupt working
    - tested working driver-minion.c without interrupts
    - Working driver-minion.c v0.1
    - driver-minion.c compilable untested
    - minion driver - incomplete
    - Add minion driver into cgminer
    - Add basic device detection and updated udev rules for nanofury devices.
    - Remove GPU from share logging example.
    - Don't keep resetting BXF clockspeed to default.
    - If no pools are active on startup wait 60s before trying to reconnect
    since we
    likely have the wrong credentials rather than all the pools being out.
    - Discard bad crc packets for hashfast driver instead of trying to
    process them.
    - Update documentation for modified avalon options syntax and document
    relevant
    55nm details.
    - Modify the auto tuning sequence to work with the 50MHz changes required
    to
    work with 55nm Avalon.
    - 55nm avalon requires the delays between writes reinstated for
    stability.
    - Use an equation instead of a lookup table to set the frequency for 55nm
    avalon
    allowing arbitrary values to be used.
    - Make the result return rate low detection on avalon less trigger happy.
    - Always send the bxf device a clockspeed after parsing the temperature
    in case
    the device has changed the clockspeed itself without notification.
    - Fix BXF being inappropriately dependent on drillbit.

 -- Christoph Korn <christoph.korn@getdeb.net>  Fri, 10 Jan 2014 21:02:48 +0100

cgminer (3.9.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - drillbit asic - enable in api.c
    - Fix trivial warnings in knc driver.
    - Reinstate work utility based hashmeter for knc.
    - drillbit format %z not valid on windows
    - drillbit more formatting changes
    - usbutils remove old code added back
    - Memset the spi tx buffer under lock in knc driver.
    - drillbit fix temp display to fit in standard space
    - Drillbit formatting
    - drillbit - use one drvlog and display dname before add_cgpu
    - Keep orginal naming for the bitfury driver
    - knc: Bugfix - good shares wrongly reported as HW errors.   Root cause
    of the
    problem: several work items were assigned the same   work_id in the
    active works
    queue of the knc driver. Thus when good   nonce report arrived from the
    FPGA,
    wrong work item was picked up from   the queue, and submit_nonce
    evaluated that
    as an error.   Fix: Limit the work_id counter update rate. Update it only
    to the
    number of   works actually consumed by the FPGA, not to the number of
    works
    send.
    - Store per-chip submit information for bxf device and show them in the
    API.
    - Check for removed bxf devices before trying to update work or send
    messages.
    - api.c no decref if not json
    - Minimise risk of nonce2 overflow with small nonce2 lengths by always
    encoding
    the work little endian, and increasing the maximum size of nonce2 to 8
    bytes.
    - Change default hashfast timeout to 500ms.
    - Ensure we can look up the work item in the hashfast driver or print out
    an
    error if we don't.
    - Drillbit source formatting - reindent and retabify
    - Add ASIC count, temperature status to drillbit API output (closes #1)
    - Many warning fixes
    - knc: Do not include variable "last minute" data into the "last hour"
    per-core
    stats
    - knc: Make per-core statistics available through API
    - Implement command line control of the bxf target temperature.
    - Add a simple PID-like controller to bi*fury devices to dynamically
    alter the
    clock setting to maintain a nominal target temperature set to 82 degrees.
    - Add data to BXF API output.
    - Add support for newer protocol bi*fury commands job, clock and hwerror,
    setting clock to default 54 value, turning parsing into a compact macro.
    - Look for the thermal overload flag in the gwq status message in the
    hashfast
    driver and send it a shutdown followed by an attempted reset.
    - Log message fixups
    - Fix for "Timing out unresponsive ASIC" for pools which send early
    reconnect
    requests, and then take a short time to send work (ie BTCGuild)
    - Shorten initial config line, win32/pdcurses doesn't like long lines
    during
    early logging
    - Pull back the very long timeouts set in fe478953cf50
    - Fix bug where work restart during results scan could lead to bad device
    state
    - Align device status lines same regardless of number of temp status or
    >10
    ASICs
    - Tag log lines from brand new devices as DRB-1 until they are
    initialised
    - Tag log lines as 'DRB0' rather than 'DRB 0', same as other places in
    cgminer
    - Print a summary of the device settings at level NOTICE during
    initialisation
    - Allow chosing device settings based on 'short' product names shown in
    status
    line
    - Allow per-device settings to use "DRBnn" as an identifier instead
    - Issue an ASIC restart during a work_restart, removes spurious timeout
    messages
    from ASICs and probably some rejected shares
    - Check all results against all work instead of just taking the first
    match
    (avoids some rejected submissions to the pool, ASIC can produce multiple
    candidate results.)
    - Fix memory leak caused by unnecesarily copied work
    - Fix bug with find_settings not returning default value
    - Set timeouts on write, set very long timeouts
    - Merge drillbit driver

 -- Christoph Korn <christoph.korn@getdeb.net>  Wed, 25 Dec 2013 21:51:01 +0100

cgminer (3.8.5-1~getdeb1) saucy; urgency=low

  * Initial release (LP: #1257439)

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 14 Dec 2013 22:16:59 +0100
