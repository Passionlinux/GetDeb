cgminer (4.7.1-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Selectively yield on dropping a lock only on single CPU platforms
    - Make it impossible to configure in more than one device that is meant
    to be standalone. Add more information to configure help, along with comments
    for new drivers.
    - Add warning against system libusb in configure help
    - stratum_rthread sleep only 3s when all the pool have disconnected
    - Filter responses that don't have a result
    - Implement support for pool ping and json integers of zero in getversion
    and ping
    - Fix segfault when writing config with hashratio built in
    - Save pools in priority order at time of writing config
    - Set the correct flag for close on exec for sockets
    - Suspend stratum on removing a pool
    - Set CLOEXEC on sockets on linux
    - Drivers that take a diff should specify a max diff or it is assumed
    they don't support one so set max_diff to 1 if unset
    - Send hfa generic frame only if voltage was specified on the command
    line for that device
    - Set hashfast voltage settings only when really needed
    - Hashfast voltage support
    - Increase max diff on sp30 to 1024
    - Reset ipv6 flag to false in every api-allow loop
    - undeclared identifier 'IPV6_ADD_MEMBERSHIP' fix for apple
    - two back temps spondoolies2
    - two back temps spondoolies
    - correct suggest_difficulty json rpc call
    - Add more usb3 hub identifiers for windows
    - Set driver max diff to large value if unset
    - Wake gws on get queued
    - Implement blacklisting of attempting to match known products from ones
    without identifiers
    - Fix hfa driver building without libcurl
    - Enable building libusb without udev
    - Fix off by one calculation error in sp30 leading zeroes
    - Send correct diff work to sp30 for hashmeter to be correct
    - Do the sleep in spondoolies_queue_full_sp30 after dropping the lock
    - Minor tidy in sp30 driver
    - Fix sp30 warnings

 -- Christoph Korn <christoph.korn@getdeb.net>  Thu, 06 Nov 2014 20:14:15 +0100

cgminer (4.7.0-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Implement generic inet_pton for windows
    - Fix warnings
    - Fix bulk of remaining style in blockerupter.c
    - Tidy style in blockerupter.h
    - Tidy bulk of style in blockerupter.c
    - Fix missing minimum diff setting for blockerupter
    - Fix unused variable warnings
    - remove unnecessary sleep; fix potenital div by 0 errs; use min_diff in
    driver definition
    - Fix coding style
    - Make the sp30 hashrate meter based on valid share generation
    - Change default max queue back to 1 in line with speed of most current
    asic controllers
    - Change diff limits to values suitable for sp30
    - Add pool number to response from addpool to the API
    - Make the restart and quit API commands valid json responses
    - Fix number of nos
    - Add option to set clock ('--bet-clk X' actual clock is (X+1)*10 )
    - compatible with X24 board
    - Fix error when using v6 without mask in api-allow
    - Support ipv6 multicast
    - Set min_diff to 1
    - Allow arbitrary clamping of lower device diffs for slow controllers by
    driver
    - Don't set default fan to max on hashratio
    - The 2nd read never gets anything on ava2 so remove it entirely and just
    return an error if we are out of sync
    - Implement support for mining.suggest_difficulty
    - Fix client ip address output
    - Free addrinfo garbage
    - Remove the brackets when using v6 pool address
    - Add ipv6 support for api listen
    - Avalon Nano: Add support Avalon Nano usb miner
    - fix bug in setdiff
    - limit minimum diff to 64
    - Add BlockErupter Driver
    - Avalon2: display currect max temperature on statline
    - Remove unused variable

 -- Christoph Korn <christoph.korn@getdeb.net>  Tue, 14 Oct 2014 15:04:20 +0200

cgminer (4.6.1-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Throttle bflsc28 devices when they hit the overheat limit
    - Add whitelisting of firmware used in final bflsc28 products
    - API.java - remove lowercase of all data sent
    - Avalon2: Add 3 bytes nonce2 support
    - Avalon2: MM needs n2size length <= 4
    - Use fan min as fan speed when run with --avalon2-fixed-speed
    - Clear the pool submit fail bool after adding shares to the stratum
      hashtable to minimise window the share is not in the table
    - api-example unlimited socket works
    - Add custom strcasestr and use custom gnu type functions in bflsc
    - Fix windows build of bflsc driver
    - Fix possible deref in bflsc28

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 20 Sep 2014 18:17:20 +0200

cgminer (4.6.0-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - We should not be checking for pool_unworkable in cnx_needed as it is
    keeping
    stratum connections open on unused pools
    - Properly handle lack of input when adding pool via menu
    - Allow workers without passwords
    - minion - increase max chip number
    - Avalon2: add more comments on Avalon2 options
    - Avalon2: add polling delay option, long coinbase support, LED status on
    API, change overheat from 88 to 98
    - minion - add a ' before non-zero core error counts
    - minion - hidden optional per core nonce stats
    - bflsc28 - clock is hex
    - bflsc28 - allow setting clock and volt from the API ascset command
    - bflsc28 - add chip count to stats
    - bflsc28 stats
    - Simplehacks to better serve bflsc28
    - Only use one hashtable for bflsc28 work queued
    - Copy back the buffer after we've stripped the inprocess field on bflsc
    - Parse results for BMA based on uid and remove work from the queue when
    found
    - Strip out the inprocess details from bflsc results if it exists
    - Create a hashtable of work by uid as it's accepted by BMA
    - Add some rudimentary values for BMA sleep times
    - Fix various errors in queueing work for bflsc28 and limit job queueing
    to 10 to fit within a usb frame
    - Create preliminary work queueing for bflsc28 using jobs of up to 20 at
    a time by rolling work where possible
    - Convert all bflsc transfers to the full 512 bytes
    - Don't mistake bflsc28 for fpga
    - Do initial detection of bflsc28 devices

 -- Christoph Korn <christoph.korn@getdeb.net>  Tue, 09 Sep 2014 22:00:33 +0200

cgminer (4.5.0-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Fix windows build for hashratio and ava2
    - Demote bad checksum message in cointerra driver but allow message to
    still be
    parsed since it won't allow existing firmwares to work otherwise
    - Reorder and document the configure options
    - Merge https://github.com/KnCMiner/cgminer into knc
    - Change default voltage on ava2 to 0.666V because Satan
    - Enable combined building of avalon2 and hashratio
    - Fix stratum embedded fpgas to not duplicate work with other devices
    - Implement smarter PID type fan control for ava2 allowing more generous
    temperatures and far lower fan speeds for optimal power and noise usage.
    Adjust default frequency to 450 as per recommendation.
    - Fix various warnings in ava2
    - Go back to polling design since async will not work for ava2 and fix
    various read design errors
    - Fix error in 2nd read functions for av2 and hro
    - Correct init and read sequence for ava2, and convert from a polling
    mechanism to a separate read thread
    - Initial commit of ava2 conversion to direct USB
    - Display frequency and voltage with ava2 on the statline
    - Store fan percentage and display temp and fan percent for ava2
    - Set avalon2 frequency and voltage to appropriate defaults if none are
    specified on the command line
    - Demote some ava2 messages that don't need to be errors and remove
    unused works array
    - Fix broken fan logic for ava2
    - Fix hexdump on 64bit
    - rockminer frequency is between 200 and 400 MHz
    - fix jansson include path in cgminer-api compile instructions
    - Remove requirement for ifndefs for avalon2 from the generic driver work
    function
    - Fix hashratio device name
    - Make submit_nonce2_nonce return whether the share was valid or not
    - Reinstate missing necessary init sequence for hashratio
    - Handle disconnected hashratio devices
    - Add hashratio frequency command line
    - Fix stratum updates not being passed to hashratio devices and clean up
    - Move to updated avalon2 type driver model for hashratio device
    - Initial import and conversion of hashratio driver to direct USB
    - Increase the internal buffer for API response,   as "stats" command
    response can grow greater than 8K
    - Detach test pool thread only if we have a blocking startup

 -- Christoph Korn <christoph.korn@getdeb.net>  Wed, 30 Jul 2014 20:21:27 +0200

cgminer (4.4.2-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Fix processarg parameters loaded from a config file not being saveable
    - We only use the jansson in our source tree so no need for special case
    handling of older versions
    - Upgrade jansson to 2.6
    - Only clear sockbuf if it's been allocated
    - Fix missing osm-led-mode support in write config
    - Deal with nanosecond overflow in both directions on both addition and
    subtration of timespecs
    - Rename sp10 driver internally from spondoolies to sp10
    - minion - add a 2nd (optional - disabled) reset test
    - production stats added, reset queue added
    - minion - correct led ghs2 choice
    - minion - correct ghs2 display
    - minion - reset the led counter when doing a chip RSTN full reset
    - minion - don't reset the led counter for an SPI reset
    - minion - led per chip and use all time average
    - minion - report spi error counts and settings in stats
    - minion - undeclared fix
    - minion - chip power cycle option
    - minion - record 0xff error history and reduce screen output
    - minion - reset on result or fifo 0xff
    - minion - clarify the 0 value of spireset
    - minion - make SPI reset more configurable
    - minion - make the SPI reset ms sleep a parameter and API settable
    - sp10 sensors
    - sp30
    - minion - led+more api setting
    - Avoid blocking all pool testing if one pool fails to ever init
    - There is no point storing the hints addrinfo in struct pool
    - minion - 'reset' SPI when getting errors
    - initialise more pool values in benchmark
    - minion - auto adjust freq
    - merge upstream frequency changes
    - icarus - timing history in its own function
    - rbox - add lotsa stats, tidy up a bit more
    - Fix an off-by-one.
    - icarus - detect stat should be LOG_DEBUG
    - icarus - tidy up rbox code, remove statics, and add rocketbox
    - minion - do an early reset to clear the chip status
    - minion - use descriptive names for the list types
    - Avalon2: automatic adjust fan speed, using crc16 on job_id compare,
    turn on
    the led by API, detect twice when start, remember the last stratum
    message
    increase the hashrate, add cutoff option
    - fix AntS1 breakages from AntS2 changes
    - minion - disable dup nonce check
    - minion - add an ioseq number for each ioctl to simplify work ordering
    - minion - redo old work expiry based on txrx order
    - minion - more work stats, minimise queued work, free flushed queued
    work
    - minion - allow resetting a chip via the API
    - minion - correct 'WQue Count' in stats
    - minion - delay after reset, reset history also, add dups to api stats
    - noncedup - give access to the internal stats
    - minion - increase reset to 75%
    - minion - dup checking, disable reread by default and extra ioctl
    debugging
    - minion - always check the chip queue before queuing new work

 -- Christoph Korn <christoph.korn@getdeb.net>  Thu, 17 Jul 2014 14:04:36 +0200

cgminer (4.4.1-1~getdeb1) trusty; urgency=medium

  * New upstream version
   - Move icarus driver to being seen as an asic
   - Clear usb reads on each pass through icarus detect to hopefully prevent
     false positives for detecting rboxes
   - Clean up pool failure and failover code for stratum

 -- Jhonny Oliveira <jhonny.oliveira@gmail.com>  Sat, 21 Jun 2014 20:39:23 +0200

cgminer (4.3.4-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Add support for 2 nonces per block in spond driver
    - Increase timeout on reset in cta driver to 5 seconds
    - Increase max diff on spondoolies driver slightly to be well below spi
    comms
    limitations
    - Use the active contents lock and safe list iteration within the linux
    usbfs
    code
    - Add Ruby Api Example
    - Automatic detect the small miners
    - Update default modules from 3 to 4
    - Fix the temp max. we should use currect max temp
    - add avalon2-cutoff options
    - Enable the cutofftemp to Avalon2. ignore longer coinbase and longer
    merkles
    stratum
    - Fix the diff value used on MM firmware
    - Mark pool as idle if stratum restart is failed
    - Add hacky workaround for double list removal race in libusb
    - Make the work given in benchmark mode deterministic on a per-device
    basis
    - Rework the benchmarking code to use a deterministic set of work items
    with a
    known number of diff share nonces at regular spaced intervals
    - minion - restrict nonce read result size to ioctl() limit
    - minion - must check temp when overheated
    - minion - idle chips that hit >100C until back to 80C
    - minion - report the chip/reg when aborting due to an invalid ioctl()
    size
    - minion - all freq in Mhz but only convert when used
    - minion - remove unused ioctl debug
    - minion - command queue is now larger
    - minion - check rolled in stale work cleanup
    - Work stats should be based on device_diff not work_difficulty since
    non-shares
    haven't been filtered out yet
    - Prevent a segfault when writing a config file containing 'rotate'
    option
    - minion - comment out HW debug message
    - minion - roll work to reduce CPU
    - minion - report init_freq in stats
    - api - howoldsec is only used for USB
    - minion - allow setting the frequency
    - minion - disable iostats by default since it slows down mining
    - minion - define frequency value table
    - minion - report temp/cores/freq and handle temp formatting
    - minion - item is undefined
    - Rationalise diffs stored in the work struct and document them to avoid
    further
    confusion
    - Add basic API stats for nfu drivers to see how many submits each chip
    returns
    - Add output direction for the EN0 pin on nfu driver
    - Support power management optimisations in newer nf* firmware
    - Support variable numbers of chips with NFU and BXM drivers
    - Identify number of chips in nanofury devices and change name
    accordingly
    - Rename nf1 driver to nfu in anticipation of support for more chips
    - Make hashfast reset counter rise on old instances when inheriting the
    value on
    new ones

 -- Jhonny Oliveira <jhonny.oliveira@gmail.com>  Sun, 08 Jun 2014 17:24:03 +0200

cgminer (4.3.3-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Fix typo
    - Work should be freed when aged, fixing a massive memory leak for bxf
    devices
    - miner.php fix single rig summary/config field formatting
    - miner.php fix single rig total formatting

 -- Christoph Korn <christoph.korn@getdeb.net>  Mon, 05 May 2014 19:34:39 +0200

cgminer (4.3.2-1~getdeb1) trusty; urgency=medium

  * New upstream version
    Version 4.3.2 - 2nd May 2014

    - Fix accounting bug with nrolltime drivers

    Version 4.3.1 - 2nd May 2014

    - upgrade some int to int64_t to avoid overflows in reporting
    - Make reconnection messages more explanatory
    - Stratum client.reconnect require matching URL
    - Fix memory leak in submit_noffset_nonce
    - Clean up any work that may not have been used in the work scheduler
    - Avoid unnecessary deref now that it's done within discard_work
    - Clean work pointers after one way usage functions
    - Avoid unnecessary total_work_inc in generating local work
    - Cosmetic fixes
    - Fix idle bug, when redirected client can't auth
    - Rename spond temp rate to asics total rate
    - Build fixes
    - Set the unique id only for usb devices with serial strings longer than
    4 chars long
    - Use usb serial strings as unique id if devices have them
    - Discretely identify the onestring miners as OSM
    - Add bxf debugging option and osm led modes
    - A1: modularize board selector / add initial CCR support
    - A1: cleanup tca9535 logging
    - A1: fix and extend PLL parameters
    - A1: clean up compile warnings
    - A1: use real level in hexdump
    - Add identification for onestring miner variants
    - Avalon2: Parser the power good signal
    - driver-avalon2: this functions used on detect, which don't have thr
    setup yet

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 03 May 2014 21:17:29 +0200

cgminer (4.3.0-1~getdeb1) trusty; urgency=medium

  * New upstream version
    - Put sleep in spond hash instead of queue full function
    - Remove unused function for when compiled without curses
    - Fix typo
    - Add temperature rate, front, rear and device temperature to spond API
    output
    - Limit bxf sleep in bxf_scan to 100ms minimum for strings of many chips
    - -Werror=format-security error on driver-bitmain.c
    - Fix parameters passed with getblockhash
    - Check the block hash with the proper command when looking for orphan
    chains
    - syslog requires a facility ... in more than one place
    - Shuffle windows headers included
    - Adjust the bxf sleep time according to the number of chips detected
    - Fix off by one error in bxf chip count when adjusting device size
    - Recalloc correct pointer
    - Make instructions associated with winusb error even more explicit
    - Add midsing headers to cgminer source in Makefile
    - Trivial style changes to mg proto parser
    - Trivial style and warning clean ups on spondoolies driver
    - Merge spondoolies driver patch
    - Call any BXF device with 3-6 chips reported HXF
    - Avoid derefrence when calling statline before on hfa device during init
    sequence
    - Calloc the info structures even on failed hfa reset to prevent later
    possible dereference
    - Load all hfa devices based on identification alone and defer init
    sequence till mining thread init sequence to allow all devices to be
    recognised rapidly but each device initialisation not delay others
    - Do not do thread shutdown unless thread init succeeded
    - Remove unnecessary check for thread_prepare function
    - Recognise variations on BXF based on chip value returned in responses
    - Provide helper function for recallocing memory
    - syslog requires a facility

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 19 Apr 2014 23:11:14 +0200

cgminer (4.2.3-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Decay the per device hashrates when only the watchdog is calling the
    hashmeter
    - Fix parsing of config files failing on custom parsing
    - Allow an arbitrary number of chips in the BXF driver, showing results
    from each chip in the API and identify the hexfury, naming it HXF
    - Disable toggling display by default and offer a --widescreen option to
    have all the information on an extra wide display.
    - Use OPT_WITH_CBARG for all custom parsing functions to allow their
    values to be written generically when writing the config file from the
    menu.
    - Provide a ccan variant OPT_WITH_CBARG that assigns the arguments passed
    as a string and then performs the callback function on the string.
    - Define strings to store special option parsing parameters leaving no
    OPT_WITH_ARG missing args
    - Correct the writing of special case options to the config file
    - Provide support for writing anu freq from menu write option
    - Update to diver-avalon2.c
    - Generalise a lot more of the command line options simplifying the write
    config function and making it write far more values unaided
    - Use the general opt_set_charp functions for setting api parameters
    - Json escape any strings written to the config file
    - Store standard charp options when writing config files
    - Add support for all the integer range options when writing the config
    file from the menu
    - Remove the --device and --remove-disabled options which don't work in a
    meaningful way any more
    - Make the bxf bits configurable on the command line
    - Provide a --btc-sig option to optionally add a custom signature to the
    solo mining coinbsae
    - Compact gbt solo extra data and store the length, allowing it to be
    variable, leaving room for a signature
    - miner.php - Kano summary Pool Acc/Rej should be only work submitted
    - miner.php add best share and gen formatting for pool summary
    - miner.php - remove BGEN/GEN eval() errors from the web log
    - miner.php allow optional fields when gen is disabled
    - miner.php dont format missing gen fields
    - miner.php make Summary a custompage
    - miner.php allow uers and system lists of customsummarypages and add
    more examples
    - Fix getwork share submission
    - Cosmetic fix to udev rules
    - Put WU on the hashrate status to compact lines further
    - miner.php show api/rig errors at the top of a customsummarypage

 -- Christoph Korn <christoph.korn@getdeb.net>  Thu, 10 Apr 2014 19:53:05 +0200

cgminer (4.2.2-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Minor correctness fix for unnecessary free
    - Clean up various curl build issues
    - allow url based config files
    - Frequency only needs 3 digits for cointerra statline
    - Use the serial number as unique_id for cta display
    - Make it possible to enable/disable the status window from switching via
    the
    display menu
    - We should not update the tv hashmeter time unless we're updating the
    hashrates
    - Add cointerra devices to udev rules.
    - Use hashfast unique id instead of number since the unique id is
    displayed
    - Remove displayed space
    - Left align the displayed unique id
    - Use the hashfast opname as its unique identifier
    - Display BF1 serial number as its unique identifier
    - Display a unique identifier instead of a number if the device has one
    - Use an alternating status display to return to a compact width of 80
    characters, allowing more information to be displayed.
    - No need for looking for khash hashrates in summary any more
    - Fix two potential minor mem leaks
    - Fix memory leaks in setup and generate work for gbt solo.
    - Fix off by one malloc size error
    - Fix memory leak in update_gbt_solo
    - Put sanity check on decay_time to prevent updates with no time
    - Add 3 rolling average hashrates to API output for summary and devs.
    - Use the extra status screen real estate better, displaying rolling
    1/5/15min
    average hashrates as well.
    - Revamp the ageing crufty hashmeter code to have proper exponential
    decaying
    values and store rolling 1/5/15min hashrates.
    - Increment total_work under control lock.
    - Trivial variable reuse
    - Add support for other usb3 hubs on windows
    - Fix various ava2 build issues generically
    - Minimise the amount of heap memory allocations/frees when submitting
    gbt
    shares.
    - Make varint in gbt submission a stack object.
    - Fix big endian problems with gbt submissions.
    - Fix 32bit overflow on relative diff shown.
    - ants1 - stop results read hard looping
    - ants1 - slow down mining if overheat occurs
    - miner.php allow gen before (bgen) and after (gen) grouping
    - Change default solo mining to failing when no btc address is specified.
    - Use upgrade cglock variants in get_gbt_curl
    - Provide a cg_uilock to unlock the intermediate variant of cglocks.
    - Use the one curl instance for all gbt solo operations, protecting its
    use with
    a bool set under gbt lock.
    - Only start block detection with gbt solo if setup succeeded
    - One less block detection message
    - Toss out the curl handle after each solo poll
    - Don't reuse any curl handles for solo mining and break out of the lp
    thread if
    the pool is removed.
    - Make sure to only start the lognpoll thread once on gbt solo.
    - Don't keep RPC connections open for solo mining since bitcoind doesn't
    like
    having many persistent connections.
    - GBT solo pools should be considered localgen pools.
    - miner.php - speed up formatting and allow calc on gen fields
    - Always show the address we're solo mining to to avoid confusion for
    when no
    address is set.
    - Fix missing htobe16 on windows and meaningless >u32 string warning.
    - Software ntime roll for all hashfast devices.
    - Silence harmless warning.
    - Drop a failed restart icarus device to allow it to be rehotplugged if
    possible.
    - Work with more than one transaction.
    - Kill gbt solo pools that don't respond to the gbt request 5 times
    sequentially.
    - Fix ser_number for no remaining val byte.
    - Create a work item and stage it when updating the gbt solo template to
    allow
    new block detection and restart code to work.
    - Test block hash as well as block height when solo mining to ensure we
    haven't
    been mining on an orphan branch.
    - Fix transaction processing for gbt solo.
    - Encode height using integer varint format.
    - Make new block detection message not show in gbt solo from
    test_work_current
    - Add block detection via getblockcount polling in gbt solo and update
    gbt
    template every 60 seconds.
    - Iterate over transactions twice to malloc only once when copying all
    the
    transaction data.
    - Update solo coinbase regularly and submit as gbt work
    - Only show merkle hashes for solo mining in debug mode.
    - Set correct flag for solo work.
    - Generate gbt solo work emulating stratum work construction.
    - Set the diff as a double sdiff from gbt solo data.
    - Move swork.diff out of the stratum work section to be shared as sdiff.
    - Generate a header bin from gbt solo as per the cached stratum one.
    - Store strings similar to stratum's when decoding gbt solo
    - Avoid allocing and freeing stratum strings that should be fixed length.
    - Run parser through detect_stratum after stratum+tcp:// is force added
    - Remove unnecessary header length calculation for stratum header binary
    and
    only binary convert the correct length of the header.
    - Share more fields between stratum and gbt
    - Share coinbase_len variable b/w stratum and gbt and setup more gbt solo
    parameters.
    - Generate a valid coinbase and set nonce2offset for gbt solo
    - Move scriptsig header bin conversion to setup gbt solo
    - Create our own custom scriptsig base.
    - Add helper functions for creating script signature templates and beging
    building template.
    - Do gbt solo decoding under gbt lock.
    - Add more gbt variable decoding from gbt solo information.
    - Store all the transaction data in binary form when using GBT
    - When setting up solo mining, check validity of bitcoin address against
    bitcoind
    - Make pooled GBT mining use merkle bin optimisations slated for solo
    mining.
    - Abstract out the merkle bin calculation for gbt solo
    - Implement efficient merkle tree base from solo GBT information.
    - miner.php custom formatting and row counter '#'
    - Drillbit: Fix for underestimating hash rate from Bitfury devices
    - Send per-core hashrates at regular ~5min intervals back to cta devices.
    - Calculate the cta per core hashrate at 5 minute intervals.
    - Check the bits of the correct core in cta bit count.
    - Display the bit count along with the bitmap for each cta core in the
    API stats
    output.
    - Store and display the per core hashrate on cta relative to each work
    restart.
    - Decrease the time we wait for unsetting a core on the cta bitmap to
    correspond
    with the lower max diff of 32.
    - Set max diff on cointerra devices to 32 which is still only 11 shares
    per
    second but allows for earlier confirmation of per core hashrates.
    - Keep track of when the last restart and work updates were triggered and
    provide helper functions for knowing the time since then.
    - hashfast make api stats field names unique
    - Fix gcc longjmp warning in api.c
    - Add a per-core hashrate to the cta API stats.
    - miner.php support edevs and estats
    - API - put edevstatus where it was supposed to be
    - Icarus - allow timing mode to work with ANU and not slow it down
    - drillbit - remove warnings
    - drillbit - minor code tidy up
    - Drillbit: Change language around 'void' to warning about limiter
    disabled
    - Drillbit: Fix accidental over-counting of HW errors
    - Drillbit: --drillbit-auto parameter for tweakable custom tuning of ASIC
    speeds
    - Drillbit: Output warning if board reports void warranty
    - Drillbit: Add Avalon & drillbit-autotune notes to ASIC-README
    - Drillbit: Limit work sent out to 8 units in a single pass, was DoSing a
    full
    double scroll
    - Drillbit: Move drillbit_empty_buffer calls to only when errors occur,
    were
    limiting performance on Windows
    - Fix Windows bug with libusb_reset_device returning SUCCESS for
    disconnected
    device
    - Drillbit: Fix some warnings
    - Drillbit: Add --drillbit-autotune option for device to dynamically
    alter clock
    speed
    - Drillbit: Fix typo in previous commit
    - Drillbit: Remove default config in cgminer, rely on defaults in
    firmware
    - Drillbit: Combine split USB transfer for sending new work, reduce
    overhead
    - Drillbit: Add support for protocol V4, with device-agnostic board
    configuration data
    - Drillbit driver: Add support for Avalon-based Drillbit miners
    - API - add edevs and estats - to only show enabled devices
    - Check device data exists on a hfa instance before trying to reinit it.
    - Print off what quadrant regulator failed if known in hfa driver.
    - Reset all the stats on autovoltage complete in cta driver.
    - Use correct diff instead of diffbits in cta driver.
    - Whitelist all firmwares <= 0.5 on hfa for software rolling of ntime.
    - Avoid a memory leak by reusing the ntime field when rolling stratum
    work.
    - Clear the pipe bitmap on cta only when no share has occurred for 2
    hours
    instead of 1.
    - Cta share_hashes should be added, and we can base it on device wdiff
    instead
    of pool work difficulty for more accurate hashrates.
    - Since the device runtime is now reset, the Raw hashrate entry in the
    cta API
    output is no longer meaningful.
    - Look for autovoltage returning to zero on cta driver and reset stats at
    that
    point since the hashrate is unreliable till then.
    - ants1 - cgminerise applog calls
    - Default to stratum+tcp:// on any urls that don't have a prefix instead
    of
    http.
    - Trivial cta style changes.
    - ants1 - fix/enable temperature checking and remove unneeded temp_old
    - ants1 - move local cgpu variables to info structure
    - ants1 use a klist to store work and copied work
    - Simplify dramatically the cross-process cgminer locking through use of
    flock
    instead of sysv semaphores.

 -- Jhonny Oliveira <jhonny.oliveira@gmail.com>  Wed, 02 Apr 2014 20:34:09 +0200

cgminer (4.1.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Correct fix for dev start time being adjusted for stat zeroing.
    - Make per device stats work for average after a stat zeroing.
    - Add an hfa-options command line that allows the clockspeed to be chosen
    per device by name comma separated, with a function that can be expanded
    with more options in the future.
    - Off by one drv_rolllimit check against jobs
    - Free the work that may be lost, leaking memory, in a failed
    hfa_send_frame
    - Roll the ntime for work within the hfa driver for firmware we know
    doesn't do it internally as an optimisation.
    - Export the roll_work function to be usable by driver code and make it
    compatible with rolling stratum work.
    - Make opt_queue be respected as a maximum value for staged items.
    - Disable mistakenly enabled lock tracking.
    - api version update for HEX32
    - api.c - HEX32 type needs quotes
    - Disable the MAX_CLOCK_DIFF check for newer hashfast firmwares since
    it's not required.
    - Store the hardware and firmware revision in the info struct for easy
    use in the hfa driver.
    - Only decrease the hfa clock rate if the device has been running for
    less than an hour before dying.
    - Change lack of op name response message in hfa driver
    - Check for lost devices at every write/read in hfa_detect_common
    - Make bxm bits configurable.
    - Move avalon2 options to ~alphabetic position in help.
    - Do a shutdown routine on bxm close.
    - Provide support for 2 chips in libbitfury sendhashdata and enable the
    2nd chip on BXM devices.
    - Remove unnecessary opayload and newbuf members of bitfury info struct.
    - Add an spi add fasync command.
    - Cope with older hfa firmware not even responding to op_name.
    - Forcibly kill everything silently with an exit code of 1 should we fail
    to cleanly shut down and use a completion timeout for the __kill_work in
    app_restart.
    - Make __kill_work itself also be a completion timeout.
    - Generalise more of libbitfury for more reuse in both nf1 and bxm
    drivers.
    - Remove redundant init components of bxm driver.
    - Set default osc6 bits on bxm to 50
    - Enable the transaction translator emulator for bxm devices and use a
    dummy spi tx the size of a normal payload.
    - Store usb11 and tt flags as booleans in cgusbdev allowing them to be
    discretely enabled as well as detected by the device data.
    - Add bxm scan function and check spi txrx returns only as much as sent.
    - Add init sequence to bxm detect one.
    - Add a bxm specific txrx function for spi transfers.
    - Add bxm close to bitfury shutdown switch.
    - Add reset/purge/cshigh/low sequence to bxm init
    - Add bitmode init to bxm open sequence.
    - Add initial bxm opening sequence for detect one.
    - Add identifiers for bxm bitfury devices.
    - Clean up parse_method
    - More gracefully break out of parse_notify on a corrupted hex string
    error, checking the return value of all hex2bin conversions and being
    consistent with using stack memory. Fix an unlocking error in cases of
    failure.
    - AntS1 - add detection information to usbutils
    - Enable Bitmain Ant S1 code and make it conform to cgminer requirements
    - Make the cointerra displayed hashrate based on valid share generation.
    - Convert and update values shown in the cointerra api output.
    - Export the api_add_int16 function.
    - Use a custom mystrstr function in cointerra driver.
    - Add api_add_int16 to API functions.
    - Add support for Bitmain Multi Chain and Single Chain and optimize the
    efficiency
    - Add support for bitmain devices
    - Perfect function of BitMain Multi Chain
    - Add support for Bitmain Multi Chain and Single Chain and optimize the
    efficiency
    - Add support for bitmain devices

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 08 Mar 2014 14:29:25 +0100

cgminer (4.0.1-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Refresh the log window on pool failure message at startup.
    - Rework the pool fail to connect at startup to not get stuck
    indefinitely
    repeatedly probing pools with new threads and to exit immediately when
    any key is pressed.
    - Use an early_quit function for shutting down when we have not
    successfully
    initialised that does not try to clean up.
    - Add more information to a hfa bad sequence tail event.
    - Increase the work queue at the top end if we've hit the bottom as well.
    - Set the work generation thread high priority, not the miner threads.
    - Bringing each hfa device online takes a lot of work generation so only
    ever do one at a time.
    - Increase the opt_queue if we can hit the maximum amount asked for but
    are still bottoming out.
    - Keep the old hfa device data intact with a clean thread shutdown to
    allow it to be re-hotplugged with the old information.
    - Cope with the API calling hfa on partially initialised devices having
    no info.
    - Show only as many digits as are required to display the number of
    devices.
    - Cold plug only one hashfast device to get started, and then hotplug
    many to minimise startup delays and possible communication delays causing
    failed first starts.
    - Send a shutdown and do a usb_nodev if hfa_reset fails.
    - Null a device driver should thread prepare fail.
    - Add a function for making all driver functions noops.
    - Don't try to reinit a device that's disabled.
    - Disable a device that fails to prepare.
    - Check for lack of thread in watchdog thread for a failed startup.
    - Make all device_data dereferences in the hfa driver safe by not
    accessing it in statline before when it's non-existent.
    - Add an option to disable dynamic core shedding on hashfast devices.
    - Do not remove the info struct on a failure to hfa prepare.
    - Detect an hfa device purely on the basis of getting a valid header
    response to an OP_NAME query, leaving init to hfa_prepare which will
    allow multiple devices
    to start without holding each other up at startup.
    - Store the presence and validity of opname in the hfa info.
    - api - buffer size off by 1 for joined commands
    - minion - clean up statline
    - Only break out of usb_detect_one when a new device is found.
    - Use usb_detect_one in the hfa driver.
    - Provide a usb_detect_one wrapper which only plugs one device at a time,
    breaking out otherwise.
    - Issue a usb_nodev on a bad work sequence tail in hfa
    - Read in hfa stream until we get a HF_PREAMBLE
    - Add shed count to hfa API stats output.
    - Display the base clockrate for hfa devices with a different name to per
    die clockrates to be able to easily distinguish them.
    - Use op_name if possible first with hfa devices to detect old instances
    and be able to choose the starting clockspeed before sending an init
    sequence, reverting to setting op name and serial number as fallbacks.
    - Make hfa resets properly inherit across a shutdown.
    - Don't break out of hfa_old_device early if there's no serial number.
    - Fix harmless warning.
    - Allow the drop in MHz per hfa failure to be specified on the command
    line.
    - Icarus - ignore HW errors in hash rate ... and fix detection of them
    - Enable the hfa shed supported feature by default.
    - Add to udev rules hfa devices for firmware writing.
    - Remove ENV from hashfast udev rules.
    - Add a --hfa-name command that allows one to specify the unique opname
    for a hashfast device.
    - Ava2 decode the voltage, get the temp_max
    - Set the clock rate with a work restart instead of an init when changing
    to old clocks for hfa
    - Set opname on hfa devices without a serial number to a hex value based
    on time to not overflow the field.
    - Add op name to hfa API stats output if it exists.
    - Set the actual op_name in hfa devices if cgminer is choosing it itself
    due to it being invalid.
    - Re-init an hfa device to its old data before setting up info structures
    as their sizes may change.
    - Remove the usb device whenever we do a running shutdown on hfa and do a
    shutdown as the imitated reinit  to allow it to hotplug again.
    - Reset opt hfa dfu boot after it's used.
    - Comment out windows only transfer on hfa startup.
    - Clean up structures unused in case of all failures in hfa detect common
    - Clear all structures should we fail to hfa reset on adjusting clock on
    a hotplug.
    - Set master and copy cgpu hash clock rate for hfa when dropping it on a
    restart.
    - Set the master hfa clock speed to lower when shutting down a copy.
    - Do a clear readbuf on any hfa reset in case the device  has not yet
    cleanly shut down.
    - Increase hfa fanspeed slightly more when it's rising in the optimal
    range than falling.
    - Always decrease hfa clock speed on a running shutdown and don't try
    sending an init frame since it will be dropped regardless.
    - Match hfa devices to old ones based on OP_NAME values before serial
    numbers if possible.
    - Read off the OP_NAME if it exists and is supported on hfa devices,
    setting it to the device serial number or a timestamp if it is invalid.
    - Updated hf protocol
    - Check for an amount along with no error in hfa clear readbuf
    - Hfa clear readbuf can return a nonsense amount when there's a return
    error so ignore the amount.
    - Running resets always cause a shutdown on hfa meaning the device will
    disappear with modern firmware so always kill off the threads to allow
    re-hotplugging.
    - Reset the hfa hash clock rate to the old one if we find an old
    instance, only setting the device id in hfa_prepare
    - Keep the device_id on the original zombie thread for HFA in case of
    further resets.
    - Break out of hfa inherit if there is no device data.
    - Inherit the hfa zombie instance after the device id has been allocated.
    - The list_for_each_cgpu macro will dereference when there are no mining
    threads yet.
    - Make hfa hotplug inherit some parameters from a previous instance if
    the serial number exists and is matching, avoiding dropping the clock on
    all devices.
    - Per device last getwork won't work if the device stops asking for work.
    - Use the share_work_tdiff function in the driver watchdogs.
    - Provide a helper function for determining time between valid share and
    getwork per device.
    - Store last_getwork time on a per-device basis.
    - Limit the decrease of hfa clock rate on reset to the default clockrate.
    - Base the hfa failure time on the current expected hashrate instead of a
    static 15 seconds.
    - We shouldn't be trying to read from the hfa_send_shutdown function
    itself.
    - Reset the icarus failing flag only when a valid nonce is found.
    - Transferred value is corrupt on a NODEV error in usbutils.
    - Set each miner thread last valid work just before starting its hash
    loop in case there are delays at startup.
    - Only memcopy *transferred data in usbutils if we have received only
    success or a non-fatal error.
    - Increase to 25 nonce ranges on icarus fail detect.
    - Set icarus device fail time to be dependent on device speed to avoid
    falsely detecting failure on slower AMU devices.
    - Updated hf protocol header.
    - Updated BE hf protocol header.
    - Take into account shed cores on hfa devices when determining how many
    jobs to send.
    - Fix compilation error with two avalon types.
    - Fix missing A1 files from distribution.

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 01 Mar 2014 17:23:04 +0100

cgminer (4.0.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Check for error from setfloatval
    - Halfdelay cannot be larger than 255.
    - Allow any arbitrary frequency to be specified for ANU devices and try
    to find the nearest frequency when initialising it, reporting if the
    frequency is not exactly as requested.
    - Only show system libusb warning when appropriate during configure.
    - Merge branch 'avalon2' of https://github.com/xiangfu/cgminer into
    xiangfu-avalon2
    - Hfa cooling remains satisfactory down to a minimum fanspeed of 5%
    - Give a nodev error if we have already set nodev in hfa clear readbuf to
    avoid further usb comms attempts.
    - Fix missing include
    - Move bitmine options to alphabetic positioning.
    - bab - missed a few 'DEAD's in last commit
    - bab - use 'bad' instead of 'dead' as per the screen B:
    - bab - roll work if possible to reduce CPU
    - Update the per die hash clock data on a running reset on hfa devices.
    - Set the per die clock on hfa to the known starting base clock instead
    of our requested clock rate.
    - Hfa device failure can be detected within 15 seconds so we should try
    restarting it sooner to avoid tripping the device's own watchdog.
    - Check return result of hfa clear readbuf to minimise error messages on
    device failure.
    - Put MHz into cta statline description.
    - Send a work restart with every shutdown message to hfa devices to clear
    any work that might be stale on the next restart.
    - Store the hfa hash_clock rate and display it in the statline.
    - Store the maximum board temperature for hfa devices and take that into
    consideration when calculating the highest temperature as well as the
    dies.
    - A1: CoinCraft-Desk driver variant
    - Initial import of Bitmine.ch A1 SPI driver
    - klondike ensure stats type matches
    - avalon, bab, drillbit, klondike use more screen space rather than
    truncating info
    - Add hashfast fanspeed% to statline display.
    - Move driver statline padding to cgminer.c, expanding width of maximum
    displayable statistics and window width to add more info.
    - Prune old stratum shares that we've seen no response for over 2 minutes
    to avoid memory leaks for pools that don't respond about some shares.
    - Add warning if system libusb is being added.
    - Only run ./configure with autogen.sh if extra parameters are passed to
    it.
    - Updated cointerra features.
    - Add le16toh defines for platforms that may be missing it.
    - Remove modminer bitstreams from distribution and replace with a README
    saying what file needs to be added if modminer build is still desired.
    - Use the simplelog function from usb_list()
    - Add a simplelog function that does not log date and time.
    - Use a unique usb_list function displaying only pertinent information
    when listing usb devices from the menu.
    - Abstract out the _in_use function to take different linked lists.
    - Break out of linked list loop in remove_in_use in case we've gone over
    the whole list.
    - Check for hfa invalid hash clockrate after other error messages.
    - Detect non-responsive icarus devices and attempt a usb reset before
    killing them after 2 minutes of no hashes.
    - Detect non-responsive bitfury devices and try a usb reset on them
    before killing their instances off after 2 minutes of no activity.
    - Allow hotplug interval to be changed from the USB menu.
    - Prevent recursive loop in __is_in_use linked list walking.
    - Add the ability to whitelist previously blacklisted usb devices from
    the menu.
    - Use a bool in struct cgpu to know when a usb device has been
    blacklisted, avoiding blacklisting it more than once.
    - bab - ensure disabled chips are counted in the screen dead chip counter
    - bab - only disable the chip once ...
    - bab - short work list skip disabled chips
    - api.c avoid incorrect gcc warning
    - cgminer -h crash fix
    - Add blacklisting as an option to the USB menu.
    - Add a mechanism to blacklist a usb device from its cgpu.
    - Add an option to the USB menu to list all known devices.
    - Add an option to send a USB reset via the USB menu.
    - Add a usb_reset by cgpu function to usbutils.
    - Add warning for attempting to unplug a usb device that is already
    removed.
    - Add USB Unplug option to USB management device management menu.
    - Add enable and disable USB device functions to the menu.
    - Add a [U]SB menu item, initially with just statistics per device,
    adding device number to the device status window display.
    - Reuse the cgpu temp entry for avalon and bitfury devices, changing
    avalon to a damped value.
    - Store the cointerra maximum temperature in the cgpu struct as an
    exponentially changing value based on the maximum temperature.
    - Reuse the cgpu->temp entry for max temperature in hfa driver.
    - bab - disable chips that return only bad results
    - Add driver for cointerra devices.
    - Add Avalon2 (2U size machine) support
    - miner.php - define a default rigport (that can be changed) and don't
    require a port number in the rigs array
    - miner.php allow links for rig buttons in tables and allow using the 4th
    IP octet if no rig name - default disabled for both
    - format fix and bad variable usage fix for --benchfile
    - Allow running cgminer in benchmark mode with a work file --benchfile
    - ANU frequency is in MHz, not hex.
    - Remove bitfury devices from the usb list on shutdown in case they have
    stopped responding but have not had a fatal usb error.

 -- Christoph Korn <christoph.korn@getdeb.net>  Fri, 21 Feb 2014 19:19:27 +0100

cgminer (3.12.3-1~getdeb1) saucy; urgency=low

  * New upstream version

 -- Christoph Korn <christoph.korn@getdeb.net>  Sun, 09 Feb 2014 17:52:03 +0100

cgminer (3.12.1-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Document new features for antminer U1 and hfa devices.
    - Add support for ANU overclocking.
    - Increase hfa fanspeed by more if we're rising in temp above the target
    than if the temp is staying the same.
    - Add debug output when get_work() is blocked for an extended period and
    add grace time to the device's last valid work to prevent false positives
    for device failure.
    - Issue a shutdown prior to a reset command for hfa devices and lock
    access to reads awaiting the response if the device is already running.
    - Do not register as successful a hfa init sequence that reports the
    clockrate as zero.
    - Show device info in noffset nonce share above target message.
    - Widen lines in top menu to fit extra large share values.
    - Only show one decimal place if pool diff is not an integer.
    - Show serial number as a hex value in hfa verbose startup.
    - Slowly remove work even if it's not being used to keep the getwork
    counter incrementing even if work is not used and as a test that pools
    are still working.
    - Increase the maximum diff between hfa dies to 100Mhz.
    - Show which hfa die is bringing down all the others when decreasing all
    the clock speeds.
    - Increase the decrease when temp has increased more and we want to
    decrease it on hfa.
    - Give device info with share above target message.
    - Allow throttling of hfa dies more frequently and increasing of speeds
    less frequently.
    - Wait after sending a hfa shutdown to allow the device to properly shut
    down before possibly sending it more commands.
    - Minimise the die clock differences in hfa to no more than 50Mhz.
    - Check for when errno is set on windows as well as the windows variant
    for errors.
    - Revert "Update to libusb-1.0.18"
    - Disable fan/die clock control in hfa if the firmware does not support
    it, with notification.
    - Add ability to enter ANU frequency as a multiple of 25 from 150-500.
    - Decrease hfa clock by 10 if a reset is attempted due to the device
    remaining idle.
    - ifdef out icarus options unused without icarus built in.
    - Reorder command line options alphabetically.
    - Add no matching work to hfa API output.
    - Change various logging message levels in the hfa driver.
    - Only adjust clocks if there is no restart in hfa to avoid 2 restarts
    back to back.
    - Ensure we iterate over all dies adjusting temperate for hfa by starting
    iterating after the last die modified.
    - Clamp initial hfa fanspeed to min/max if passed as parameters.
    - Allow hfa fanspeed to be set via command line.
    - Further relax the target temperatures on hfa driver, targetting 88
    degrees.
    - Try one more time to get the hfa header on init since it can take 2
    seconds for all 3 boards on a sierra.
    - Update authors for removal of gpu/scrypt.
    - Wait for 5 temperature updates in hfa before adjusting fanspeed.
    - Have some leeway before starting to throttle hfa dies.
    - Use increments of 10 when increasing hfa clock since it may not have 5
    MHz granularity internally.
    - Only perform a hfa fan speed update if we have new temps to work with.
    - Correctly measure the hfa max temp and smooth out the changes in its
    value.
    - Choose better defaults for min/max/default fan settings for hfa driver.
    - bab - reduce def speed, fix speed staying in ranges and report
    bank/chips in ioctl() errors
    - bab - add info about number of boards/chips to each Dead Chain
    - These may not be longs (eg: OSX)... fo a safe cast to ensure.
    - bab - add dead boards and dead chains to stats
    - Add fanspeed to hfa api output and set initial fanspeed to 10%
    - Add hfa fanspeed control to try and maintain a target temperature.
    - API-README correct new text format documentation
    - API allow multiple commands/replies in one request
    - Add op commands necessary to control hfa fanspeeds.
    - Add OP_FAN to hf protocol header.
    - Always show the stratum share lag time in debug mode.
    - Add stratum share response lag time to verbose output if it's greater
    than 1 second.
    - Add stratum share submission lag time to verbose information if it's
    over 1 second.
    - Check for more interrupted conditions in util.c and handle them
    gracefully.
    - Send a ping to hfa devices if nothing is sent for over 5 seconds.
    - Add OP_PING to hfa commands
    - Display the hfa serial number as a hexadecimal value.
    - Add the ability to display a hexadecimal 32 bit unsigned integer to the
    API.
    - Limit all hfa restarts for temperature control to no closer than 15
    seconds apart.
    - Allow the hfa temp target to be disabled by setting it to zero.
    - Handle interruptions to various select calls in util.c
    - Add sanity check for silly overflows in hfa die temperature readings.
    - Add per-die throttling control for hfa driver based on each die's
    temperature, issuing a suitable reset to maintain the temperature below
    a configurable target temperature.
    - Update hf protocol
    - Do not memcpy in usbutils unless data was transferred.
    - Send a full allotment of jobs to the hfa device after a restart instead
    of reading the status.
    - Export the flush_queue function for use by drivers.
    - Remove wrong goto
    - Remove the unqueued work reference when we discard work from get queued
    as well.
    - Wake the global work scheduler when we remove a work item from the
    unqueued work pointer.
    - Discard work that is stale in the get_queued() function, returning NULL
    instead.
    - Add a call to a driver specific zero stats function when zero stats is
    called to allow each driver to reset its own stats as well if desired.

 -- Christoph Korn <christoph.korn@getdeb.net>  Fri, 07 Feb 2014 21:04:08 +0100

cgminer (3.12.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Add support for AntminerU1 devices with the icarus driver.
    - Add antminer U1 to comment in udev rules.
    - Do away with usb resets entirely since we retry on both pipe and io
    errors now and they're of dubious value.
    - Retry on usb IO errors instead of faking success.
    - Check that we've cleared the pipe error after a clear request, not the
    err value which is unchanged.
    - Update to libusb-1.0.18
    - Change hfa overheat limit to 90 degrees.
    - Relax timeout in hf get header to 500ms to match the usb timeout.
    - Minion - check/clear interrupts for all chips
    - Set info work to null after it is freed in nf1 after a restart to
    prevent double free later.
    - The second_run bool in libbitfury should be per device. Microoptimise
    its and
    job_switched usage, removing the unused results array for NF1 devices.
    - Fix displayed diff when solo mining at >2^32 diff.
    - bab - stop stale work accumulating
    - bab - set the default SPI speed back to 96000

 -- Christoph Korn <christoph.korn@getdeb.net>  Wed, 29 Jan 2014 18:35:15 +0100

cgminer (3.11.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Add hashfast documentation to ASIC README
    - Support the variable HFA naming throughout the driver notices.
    - Set the global hfa hash clock rate to equal the lowest if we are
    lowering it
    for a device reset since it may be re-hotplugged after failing reset.
    - Decrease the hfa clock rate if it is overclocked and we have had to try
    resetting it.
    - Put a sanity check on the measured temperature in the hfa driver for
    obviously
    wrong values.
    - Avoid calling applog from within hfa statline before to avoid a
    deadlock.
    - Add throttling control to hfa driver, configurable at command line,
    nominally
    set to 85 degrees.
    - Reset hfa device if no valid hashes are seen for 1 minute from the last
    work.
    - Store when the last getwork was retrieved and display it in the API
    summary.
    - bab - also report dead chip count screen
    - Count share based hashes in the hfa driver with the device diff to get
    more
    frequent updates.
    - Only count 2/3 of the accumulated hashes on each pass through the hfa
    scan
    work loop to smooth out displayed hashrate.
    - bab add total history HW% to API stats
    - Test valid nonces in the hashfast driver allowing us to check against
    the
    target when trying to submit them.
    - No point casting a double to a uint64
    - Convert the hfa hashmeter to one based on successful share return and
    display
    the raw and calculated hash totals in the API.
    - bab - remove libbitfury dependency since it requires USB
    - Add description to hfa hash clock command.
    - Add hfa board temperatures to API output.
    - Wait for up to 0.5 seconds in the hashfast scanwork loop if no jobs are
    required.
    - Label HFA devices as B or S when their configuration matches babyjet or
    sierra.
    - Fix libbitfury being compiled in always by mistake.
    - bab - spelling
    - Add bab-options
    - bab - tune the chip speed based on error rates
    - bab record/report spie and miso errors
    - Win32 falsely comes up as big endian pulling in the wrong hf protocol
    header.
    - Remove unused components in hashfast driver.
    - Check in all usb communication places for hashfast driver that the
    device
    still exists.
    - Do not send a usb reset on a usb read pipe error.
    - Don't replace usb pipe errors with the pipe reset return code.
    - Updated hf protocol header.
    - The search for extra nonce is not worth performing in the hashfast
    driver.
    - Add core address to hfa parse nonce debugging.
    - Retry sending a frame once if it has failed in hfa_send_frame
    - Add extra hfa usb init errors.
    - Quiet now unused variable warning in hfa detect.
    - Remove unused variable.
    - Add board temperature to hfa debug
    - Make submit_tested_work return a bool about whether it meets the work
    target
    or not.
    - Provide a helper function for determining dev runtime and use it in the
    hashmeters used.
    - Look for hfa usb init header for 2 seconds, then resend the init twice
    more
    before failing.
    - Really only set up the hfa crc table once.
    - Generically increase the queue if we are mining on a pool without local
    work
    generation each time we run out of work.
    - Change new block detection message since longpoll is rarely relevant
    today.
    - Change the default clockspeed bits on nanofury devices to 50 and add a
    command
    line option to allow it to be changed.
    - Use unused line at the top of the log window which often gets stuck
    unchanging.
    - Clear pool work on a stratum reconnect message.
    - bab record/report spie and miso errors
    - bab - cleanup old work for dead chips also
    - bab add avg fail tests to API stats
    - bab report bank/board/chip for dead and v.slow chips
    - bab process all nonce replies per chip together
    - bab reduce work delays
    - bab record the number of E0s discarded
    - bab - modified result parsing
    - bab restore removed unused flag
    - configure - correct minion name
    - bab only scan valid nonce offsets
    - bab record continuous (and max) bad nonces
    - bab display Banks/Boards/Chips in the device window
    - Modify thread naming to make them easier to identify
    - bab reduce the work send delay
    - bab remove results polling
    - bab report SPI wait in seconds
    - bab report missing chips at start and API
    - bab ensure there's enough space for the nonce reply
    - bab correct stats 'Send Max'
    - bab allow long enough wait on ioctl() per board
    - bab more I/O stats
    - api.c 2014
    - api allow any size stats data
    - bab add processed links which excludes expired links skipped
    - bab report chips per bank, hw% and ghs per chip
    - bab lock access to new_nonces to ensure correct reporting
    - bab report V2 banks/boards during initialisation
    - bab expire chip work
    - bab use only k_lists and make work handling more refined
    - klist - allow adding to tail
    - bab remove old unused #define
    - bab correct for master git
    - correct klist reallocs
    - klist lists for bab
    - api.c correct DEVICECODE and ordering
    - Maxchips should be 384 (16 chips/board 24 boards/controller)
    - bab more detailed stats and delay less when waiting for a buffer
    - api add data type AVG float 3 decimal
    - bab - add V2 detect with bug fix in detect
    - api.c set the actual version number to 3.0
    - API V3.0 unlimited socket reply size
    - README update --usb
    - Check for loss of device in usb read before any other code on the
    usbdev
    - Change stratum strings under stratum_lock in reconnect and free old
    strings.
    - Add mcp2210 compilation to want_libbitfury configs.
    - Fix HF driver typo.

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 25 Jan 2014 16:33:09 +0100

cgminer (3.10.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - Set the mcp2210 transfer setting only when it changes.
    - Buffer sizes in nanofury device data are unnecessarily large.
    - Only perform spi reset on init, not with each transaction.
    - Remove spi_detect_bitfury at nanofury startup and fix incorrect refresh
    time.
    - Use a simple serialised work model for nanofury
    - Use bitfury_checkresults to avoid hashing results twice in nanofury.
    - Export bitfury_checkresults in libbitfury
    - Pass extra parameters for later use in libbitfury_sendHashData
    - Avoid double handling bswap of the nonce value in nanofury
    - Avoid unnecessary rehashing in nanofury nonce checking.
    - Remove the unused portions of atrvec in the nanofury driver
    - Age work in nf1_scan to avoid risk of losing a work item and leaking
    memory.
    - bitfury_work_to_payload is double handling the data unnecessarily
    - Default bitrate on nanofury should be 200kHz
    - localvec should be only 80 bytes not 80 words
    - Wrong init value for nanofury
    - Remove unused rehash values from nanofury driver.
    - Only update info work in nanofury driver when it's empty.
    - Fill the appropriate type of usb transfer when we know if it's an
    interrupt
    transfer instead of a bulk one.
    - Use the internal knowledge of the usb epinfo to determine whether we
    should be
    doing an interrupt instead of a bulk transfer, and do not send a ZLP if
    so, and
    limit read transfer to expected size automatically.
    - Avoid bin2hex memleak when we start getting nanofury nonces
    - Set atrvec only once and use a local array for each device's work.
    - Cancel any spi transfers on nf1 close
    - Add bitfury detection loop to nanofury startup
    - Move spi init code to libbitfury
    - Remove inappropriate extra config reg in nanofury setup.
    - Status 0x30 should never happen with spi transfers.
    - Fix spi transfer data size transmission mistakes.
    - Minor correctness change in spi_add_data
    - spi_txrx should always send and receive the same size message
    - Random libbitfury changes.
    - Set value of gpio pins to low on closing nanofury.
    - Fix more init sequence for nanofury.
    - Add basic initialisation for nf1 devices
    - Add basic nf1_scan function.
    - Basic import of libbitfury functions from nanofury branch
    - Import functions from nanofury fork for libbitfury
    - Meter out spi sends to only 2 bytes at a time, offsetting according to
    how
    much data returns.
    - Use the usb read limit function for mcp2210 reads.
    - Provide a way for usb reads to just read the size asked for with a
    limit bool.
    - Get pin value after an nf1 spi reset.
    - Make sure what we send in the buffer doesn't change during spi reset
    for
    nanofury
    - Remove all standalone gpio setting change functions in mcp2210 and just
    use
    the one global setting function.
    - Set gpio values in the one function with all values for nanofury.
    - Provide a helper function for setting all mcp2210 gpio settings.
    - Add a helper function for getting all mcp2210 gpio settings.
    - Set all pin designations and directions in one call for nanofury and
    don't
    bother storing their values in the info struct.
    - Provide helper functions for setting all pins and dirs on mcp2210
    - Set all nanofury pin designations in one call
    - Provide a helper function for setting all pin designations on mcp2210
    - Store the spi settings in a struct for nanofury devices.
    - Check the received status in mcp2210 spi transfers and repeat a zero
    byte send
    if it's in progress.
    - Set the bytes per spi transfer prior to each mcp2210 transfer.
    - Separate out the send and receive functions for mcp2210 and check
    response
    value in return.
    - Check that mcp2210 spi settings have taken and check the value of the
    pin
    during nanofury setup.
    - Don't set GPIO pin designations after initial setting in nanofury since
    the
    direction and values will be changed.
    - Provide an mcp 2210 set gpio input helper function that sets a pin to
    gpio and
    input.
    - Move the set gpio output function to a generic mcp2210 version from
    nanofury
    which also sets the pin to gpio.
    - Implement a nanofury txrx with a larger buffer and cycling over data
    too large
    to send.
    - Implement magic spi reset sequence for nanofury.
    - Add more spi magic to the nanofury init sequence.
    - Add lots of magic spi initialisation to nanofury.
    - Export reused components of bitfury management into a libbitfury and
    use for
    bab and bitfury drivers.
    - More init sequence for nanofury and implement a close function that
    sets all
    pins to input.
    - Reword offset header handling in hfa_get_header
    - Sanity check in hfa_get_header
    - Add more checks in hashfast driver for lost devices.
    - Change spimode and send more data in nanofury setup.
    - Add basic setup  comms to nanofury.
    - Implement an mcp2210 spi transfer function.
    - Set the initial spi settings for nanofury driver.
    - Provide a helper function for gettings mcp2210 spi settings.
    - Implement an mcp2210 set spi transfer settings function.
    - Cancel any SPI transfers in progress in nanofury after initial setup.
    - Implement an mcp2210 spi cancel function.
    - Return only binary values for mcp2210 GPIO values.
    - Set GPIO LED and power to high in nanofury driver.
    - Implement initial part of nanofury init sequence for GPIO pin settings
    and add
    output debugging of set values.
    - Add helper functions for getting and setting mcp2210 gpio pin
    designations.
    - Don't return an error in usb read if we've managed to get the whole
    read
    length we've asked for.
    - Use correct endpoint order for nanofury devices and read with a short
    timeout
    on return loop from send_recv.
    - Add mcp2210 helper functions for getting and setting one GPIO pin val
    and
    direction.
    - Create a generic gpio pin struct and add helpers for mcp get pin val
    and dirs.
    - Check the receive msg of a send/receive cycle on mcp2210 matches the
    send
    message.
    - Add a set of usb commands to the usbutils defines for mcp2210 comms,
    and use
    the same command name for send and receive.
    - Create a generic mcp2210 send_rcv function.
    - Include mcp header for bitfury and fix extra params in macro.
    - Add basic SPI comms defines for mcp2210 and build rules for bitfury.
    - Minion set some core defaults similar to final requirements
    - minion compile warnings
    - move driver-minion.c to main directory
    - Minion with ioctl() stats, settings to attempt to emulate 21TH/s
    - minion driver with results interrupt working
    - tested working driver-minion.c without interrupts
    - Working driver-minion.c v0.1
    - driver-minion.c compilable untested
    - minion driver - incomplete
    - Add minion driver into cgminer
    - Add basic device detection and updated udev rules for nanofury devices.
    - Remove GPU from share logging example.
    - Don't keep resetting BXF clockspeed to default.
    - If no pools are active on startup wait 60s before trying to reconnect
    since we
    likely have the wrong credentials rather than all the pools being out.
    - Discard bad crc packets for hashfast driver instead of trying to
    process them.
    - Update documentation for modified avalon options syntax and document
    relevant
    55nm details.
    - Modify the auto tuning sequence to work with the 50MHz changes required
    to
    work with 55nm Avalon.
    - 55nm avalon requires the delays between writes reinstated for
    stability.
    - Use an equation instead of a lookup table to set the frequency for 55nm
    avalon
    allowing arbitrary values to be used.
    - Make the result return rate low detection on avalon less trigger happy.
    - Always send the bxf device a clockspeed after parsing the temperature
    in case
    the device has changed the clockspeed itself without notification.
    - Fix BXF being inappropriately dependent on drillbit.

 -- Christoph Korn <christoph.korn@getdeb.net>  Fri, 10 Jan 2014 21:02:48 +0100

cgminer (3.9.0-1~getdeb1) saucy; urgency=low

  * New upstream version
    - drillbit asic - enable in api.c
    - Fix trivial warnings in knc driver.
    - Reinstate work utility based hashmeter for knc.
    - drillbit format %z not valid on windows
    - drillbit more formatting changes
    - usbutils remove old code added back
    - Memset the spi tx buffer under lock in knc driver.
    - drillbit fix temp display to fit in standard space
    - Drillbit formatting
    - drillbit - use one drvlog and display dname before add_cgpu
    - Keep orginal naming for the bitfury driver
    - knc: Bugfix - good shares wrongly reported as HW errors.   Root cause
    of the
    problem: several work items were assigned the same   work_id in the
    active works
    queue of the knc driver. Thus when good   nonce report arrived from the
    FPGA,
    wrong work item was picked up from   the queue, and submit_nonce
    evaluated that
    as an error.   Fix: Limit the work_id counter update rate. Update it only
    to the
    number of   works actually consumed by the FPGA, not to the number of
    works
    send.
    - Store per-chip submit information for bxf device and show them in the
    API.
    - Check for removed bxf devices before trying to update work or send
    messages.
    - api.c no decref if not json
    - Minimise risk of nonce2 overflow with small nonce2 lengths by always
    encoding
    the work little endian, and increasing the maximum size of nonce2 to 8
    bytes.
    - Change default hashfast timeout to 500ms.
    - Ensure we can look up the work item in the hashfast driver or print out
    an
    error if we don't.
    - Drillbit source formatting - reindent and retabify
    - Add ASIC count, temperature status to drillbit API output (closes #1)
    - Many warning fixes
    - knc: Do not include variable "last minute" data into the "last hour"
    per-core
    stats
    - knc: Make per-core statistics available through API
    - Implement command line control of the bxf target temperature.
    - Add a simple PID-like controller to bi*fury devices to dynamically
    alter the
    clock setting to maintain a nominal target temperature set to 82 degrees.
    - Add data to BXF API output.
    - Add support for newer protocol bi*fury commands job, clock and hwerror,
    setting clock to default 54 value, turning parsing into a compact macro.
    - Look for the thermal overload flag in the gwq status message in the
    hashfast
    driver and send it a shutdown followed by an attempted reset.
    - Log message fixups
    - Fix for "Timing out unresponsive ASIC" for pools which send early
    reconnect
    requests, and then take a short time to send work (ie BTCGuild)
    - Shorten initial config line, win32/pdcurses doesn't like long lines
    during
    early logging
    - Pull back the very long timeouts set in fe478953cf50
    - Fix bug where work restart during results scan could lead to bad device
    state
    - Align device status lines same regardless of number of temp status or
    >10
    ASICs
    - Tag log lines from brand new devices as DRB-1 until they are
    initialised
    - Tag log lines as 'DRB0' rather than 'DRB 0', same as other places in
    cgminer
    - Print a summary of the device settings at level NOTICE during
    initialisation
    - Allow chosing device settings based on 'short' product names shown in
    status
    line
    - Allow per-device settings to use "DRBnn" as an identifier instead
    - Issue an ASIC restart during a work_restart, removes spurious timeout
    messages
    from ASICs and probably some rejected shares
    - Check all results against all work instead of just taking the first
    match
    (avoids some rejected submissions to the pool, ASIC can produce multiple
    candidate results.)
    - Fix memory leak caused by unnecesarily copied work
    - Fix bug with find_settings not returning default value
    - Set timeouts on write, set very long timeouts
    - Merge drillbit driver

 -- Christoph Korn <christoph.korn@getdeb.net>  Wed, 25 Dec 2013 21:51:01 +0100

cgminer (3.8.5-1~getdeb1) saucy; urgency=low

  * Initial release (LP: #1257439)

 -- Christoph Korn <christoph.korn@getdeb.net>  Sat, 14 Dec 2013 22:16:59 +0100
